---

- name: Install required packages
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_flattened:
    - '{{ tinc__base_packages }}'
    - '{{ tinc__packages }}'
  register: tinc__register_install

- name: Create system group for VPN service
  group:
    name: '{{ tinc__group }}'
    state: 'present'
    system: True

- name: Create system user for VPN service
  user:
    name: '{{ tinc__user }}'
    state: 'present'
    system: True
    comment: 'tinc VPN service'
    home: '{{ tinc__home }}'
    group: '{{ tinc__group }}'
    shell: '/bin/false'
    createhome: False

- name: Load the required kernel modules
  modprobe:
    name: '{{ item }}'
    state: 'present'
  with_items: '{{ tinc__modprobe_modules }}'
  when: (tinc__modprobe|bool and ansible_local|d() and ansible_local.cap12s|d() and
         (not ansible_local.cap12s.enabled | bool or
          (ansible_local.cap12s.enabled | bool and
           'cap_sys_admin' in ansible_local.cap12s.list)))

- name: Make sure that required modules are loaded on boot
  lineinfile:
    dest: '/etc/modules'
    regexp: '^{{ item }}$'
    line: '{{ item }}'
    state: 'present'
  with_items: '{{ tinc__modprobe_modules }}'
  when: (tinc__modprobe|bool and ansible_local|d() and ansible_local.cap12s|d() and
         (not ansible_local.cap12s.enabled | bool or
          (ansible_local.cap12s.enabled | bool and
           'cap_sys_admin' in ansible_local.cap12s.list)))

- name: Set tincd default environment
  template:
    src: 'etc/default/tinc.j2'
    dest: '/etc/default/tinc'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Reload tinc' ]

- name: Create required directories
  file:
    path: '/etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") }}.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name|d()

- name: Generate main configuration file
  template:
    src: 'etc/tinc/network/tinc.conf.j2'
    dest: '/etc/tinc/{{ item.name }}/tinc.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name|d() and item.tinc_options|d()
  notify: [ 'Reload tinc' ]

- name: Generate tinc-up network scripts
  template:
    src: 'etc/tinc/network/tinc-up.j2'
    dest: '/etc/tinc/{{ item.name }}/tinc-up'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0750'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: (item.name|d() and item.tinc_options|d() and
         (item.generate_tinc_up is undefined or item.generate_tinc_up|bool))

- name: Generate tinc-down network scripts
  template:
    src: 'etc/tinc/network/tinc-down.j2'
    dest: '/etc/tinc/{{ item.name }}/tinc-down'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0750'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: (item.name|d() and item.tinc_options|d() and
         (item.generate_tinc_down is undefined or item.generate_tinc_down|bool))

- name: Configure which networks are started at boot
  template:
    src: 'etc/tinc/nets.boot.j2'
    dest: '/etc/tinc/nets.boot'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Initialize RSA key pairs
  shell: yes | tincd -n {{ item.name }} -K{{ item.rsa_key_length | d(tinc__rsa_key_length) }}
  args:
    creates: '/etc/tinc/{{ item.name }}/rsa_key.priv'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name is defined and item.tinc_options is defined

- name: Create persistent copy of host public key
  command: cp /etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") }}
              /etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") + ".d/99_rsa-public-key" }}
  args:
    creates: /etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") + ".d/99_rsa-public-key" }}
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name is defined and item.tinc_options is defined

- name: Generate host configuration file
  template:
    src: 'etc/tinc/network/hosts/hostname.j2'
    dest: '/etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") }}.d/00_host-config'
    owner: 'root'
    group: 'root'
    mode: '0640'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name is defined and item.tinc_options is defined

- name: Assemble host configuration file from parts
  assemble:
    src: '/etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") }}.d'
    dest: '/etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") }}'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name is defined and item.tinc_options is defined
  notify: [ 'Reload tinc' ]

- name: Upload public keys from hosts
  fetch:
    src: '/etc/tinc/{{ item.name }}/hosts/{{ (item.hostname | d(tinc__hostname)) | replace("-","_") }}'
    dest: '{{ secret + "/tinc/networks/" + item.name + "/by-network/" + item.name + "/hosts/" + (item.hostname | d(tinc__hostname) | replace("-","_")) }}'
    flat: True
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name|d() and item.tinc_options|d()

- name: Download public keys per network
  copy:
    src: '{{ secret + "/tinc/networks/" + item.name + "/by-network/" + item.name + "/hosts/" }}'
    dest: '/etc/tinc/{{ item.name }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name is defined and item.tinc_options is defined
  notify: [ 'Reload tinc' ]

- name: Download public keys for all hosts
  copy:
    src: '{{ secret + "/tinc/networks/" + item.name + "/by-group/all/hosts/" }}'
    dest: '/etc/tinc/{{ item.name }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name is defined and item.tinc_options is defined
  notify: [ 'Reload tinc' ]

- name: Download public keys per group
  copy:
    src: '{{ secret + "/tinc/networks/" + item.0.name + "/by-group/" + item.1 + "/hosts/" }}'
    dest: '/etc/tinc/{{ item.0.name }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_nested:
    - '{{ tinc__default_networks + tinc__networks }}'
    - '{{ tinc__inventory_groups }}'
  when: (item.0.name|d() and item.0.tinc_options|d() and
         item.1 in group_names)
  notify: [ 'Reload tinc' ]

- name: Download public keys per host
  copy:
    src: '{{ secret + "/tinc/networks/" + item.name + "/by-host/" + ((item.inventory_hostname | d(tinc__inventory_hostname))) + "/hosts/" }}'
    dest: '/etc/tinc/{{ item.name }}/hosts/'
    owner: 'root'
    group: '{{ tinc__group }}'
    mode: '0640'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: item.name|d() and item.tinc_options|d()
  notify: [ 'Reload tinc' ]

- name: Configure systemd default variables
  template:
    src: 'etc/default/tinc-network.j2'
    dest: '/etc/default/tinc-{{ item.name }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: tinc__systemd|bool and item.name|d() and item.tinc_options|d()
  notify: [ 'Reload tinc' ]

- name: Configure systemd unit files
  template:
    src: 'etc/systemd/system/{{ item }}.j2'
    dest: '/etc/systemd/system/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: [ 'tinc.service', 'tinc@.service' ]
  register: tinc__register_systemd
  when: tinc__systemd | bool

- name: Reload systemd daemon configuration
  shell: systemctl daemon-reload ; systemctl enable tinc.service
  when: tinc__register_systemd.changed | bool

- name: Start tinc VPN networks on first install
  service:
    name: 'tinc'
    state: 'restarted'
  when: not tinc__systemd | bool and tinc__register_install.changed | bool

- name: Manage tinc network services in systemd
  service:
    name: 'tinc@{{ item.name }}'
    enabled: '{{ (True if ((item.delete is undefined or not item.delete|bool) and
                           (item.boot is undefined or item.boot|bool))
                       else False) | bool }}'
    state: '{{ ("stopped" if (item.delete|d() and item.delete|bool) else "started") }}'
  with_items: '{{ tinc__default_networks + tinc__networks }}'
  when: tinc__systemd | bool and item.name|d() and item.tinc_options|d()

