---

- name: Install required Etherpad packages
  apt:
    pkg: '{{ item }}'
    state: 'latest'
    install_recommends: no
  with_items:
    - build-essential
    - pkg-config
    - libssl-dev
    - libpq-dev
    - curl
    - git

- name: Install Abiword if enabled
  apt:
    pkg: 'abiword'
    state: 'latest'
    install_recommends: no
  when: etherpad_abiword is defined and etherpad_abiword

- name: Create Etherpad system group
  group:
    name: '{{ etherpad_group }}'
    system: yes
    state: 'present'

- name: Create Etherpad user
  user:
    name: '{{ etherpad_user }}'
    group: '{{ etherpad_group }}'
    home: '{{ etherpad_home }}'
    comment: 'Etherpad'
    system: yes
    state: 'present'

- name: Create Etherpad source directory
  file:
    path: '{{ etherpad_src_dir }}'
    state: 'directory'
    owner: '{{ etherpad_user }}'
    group: '{{ etherpad_group }}'
    mode: '0750'

- name: Secure Etherpad home directory
  file:
    path: '{{ etherpad_home }}'
    state: 'directory'
    owner: '{{ etherpad_user }}'
    group: '{{ etherpad_group }}'
    mode: '0750'

- name: Clone Etherpad source code
  git:
    repo: '{{ etherpad_source_address + "/" + etherpad_repository }}'
    dest: '{{ etherpad_src_dir + "/" + etherpad_repository }}'
    version: '{{ etherpad_version }}'
    bare: yes
    update: yes
  sudo_user: '{{ etherpad_user }}'
  register: etherpad_register_source
  tags: [ 'role::etherpad:source' ]

- name: Check if Etherpad is checked out
  stat:
    path: '{{ etherpad_home + "/" + etherpad_repository }}'
  register: etherpad_register_directory
  tags: [ 'role::etherpad:source' ]

- name: Create Etherpad directory
  file:
    path: '{{ etherpad_home + "/" + etherpad_repository }}'
    state: 'directory'
    owner: '{{ etherpad_user }}'
    group: '{{ etherpad_group }}'
    mode: '0755'
  when: (etherpad_register_source is defined and etherpad_register_source.changed == True) or
        (etherpad_register_directory is defined and etherpad_register_directory.stat.exists == False)
  tags: [ 'role::etherpad:source' ]

- name: Prepare Etherpad worktree
  template:
    src: 'var/local/etherpad-lite/etherpad-lite/git.j2'
    dest: '{{ etherpad_home + "/" + etherpad_repository }}/.git'
    owner: '{{ etherpad_user }}'
    group: '{{ etherpad_group }}'
    mode: '0644'
  when: (etherpad_register_source is defined and etherpad_register_source.changed == True) or
        (etherpad_register_directory is defined and etherpad_register_directory.stat.exists == False)
  tags: [ 'role::etherpad:source' ]

- name: Checkout Etherpad
  command: git checkout --force {{ etherpad_version }}
  args:
    chdir: '{{ etherpad_src_dir + "/" + etherpad_repository }}'
  environment:
    GIT_WORK_TREE: '{{ etherpad_home + "/" + etherpad_repository }}'
  sudo_user: '{{ etherpad_user }}'
  register: etherpad_register_checkout
  notify: [ 'Restart etherpad-lite' ]
  when: (etherpad_register_source is defined and etherpad_register_source.changed == True) or
        (etherpad_register_directory is defined and etherpad_register_directory.stat.exists == False)
  tags: [ 'role::etherpad:source' ]

## Not used anywhere but it should stay for now: See https://github.com/debops/ansible-etherpad/pull/13
- name: Generate Etherpad session key
  set_fact:
    etherpad_session_key: '{{ lookup("password", secret + "/credentials/" + ansible_fqdn + "/etherpad/session_key chars=ascii,numbers,digits,hexdigits length=30") }}'
  when: secret is defined and secret

- name: Generate Etherpad configuration
  template:
    src: 'var/local/etherpad-lite/etherpad-lite/settings.json.j2'
    dest: '{{ etherpad_home + "/" + etherpad_repository }}/settings.json'
    owner: '{{ etherpad_user }}'
    group: '{{ etherpad_group }}'
    mode: '0644'
  notify: [ 'Restart etherpad-lite' ]
  tags: [ 'role::etherpad:config' ]

- name: Reserve Etherpad port
  template:
    src: 'etc/services.d/50_etherpad-lite.j2'
    dest: '/etc/services.d/50_etherpad-lite'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Assemble services.d' ]

- name: Create log directory
  file:
    path: '/var/log/etherpad-lite'
    state: 'directory'
    owner: '{{ etherpad_user }}'
    group: 'adm'
    mode: '0755'

- name: Configure etherpad-lite system service
  template:
    src: '{{ item }}.j2'
    dest: '/{{ item }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items:
    - 'etc/default/etherpad-lite'
    - 'etc/logrotate.d/etherpad-lite'

- name: Install etherpad-lite init script
  template:
    src: 'etc/init.d/etherpad-lite.j2'
    dest: '/etc/init.d/etherpad-lite'
    owner: 'root'
    group: 'root'
    mode: '0755'
  notify: [ 'Restart etherpad-lite' ]

- name: Enable etherpad-lite service
  service:
    name: 'etherpad-lite'
    enabled: yes

- name: Install Etherpad dependencies
  command: bin/installDeps.sh
  args:
    chdir: '{{ etherpad_home + "/" + etherpad_repository }}'
    creates: '{{ etherpad_home }}/.node-gyp'
  sudo_user: '{{ etherpad_user }}'

- name: Install sqlite3 NPM dependency for Etherpad
  npm:
    name: 'sqlite3'
    path: '{{ etherpad_home + "/" + etherpad_repository }}'
    state: 'present'
    production: yes
  sudo_user: '{{ etherpad_user }}'
  notify: [ 'Restart etherpad-lite' ]
  when: etherpad_database == 'sqlite'

- name: Manage Etherpad plugins
  npm:
    name: 'ep_{{ item }}'
    path: '{{ etherpad_home + "/" + etherpad_repository }}'
    state: 'present'
    production: yes
  with_flattened: etherpad_plugins
  sudo_user: '{{ etherpad_user }}'
  notify: [ 'Restart etherpad-lite' ]
  when: etherpad_plugins is defined and etherpad_plugins
  tags: [ 'role::etherpad:plugins' ]

- meta: flush_handlers

- name: Ensure that etherpad-lite is started
  service:
    name: 'etherpad-lite'
    state: 'started'
  tags: [ 'role::etherpad:api' ]

- name: Wait for the API key file generation
  wait_for:
    path: '{{ etherpad_api_key_file }}'
    timeout: 30
  tags: [ 'role::etherpad:api' ]

- name: Wait for Etherpad application port to be reachable
  wait_for:
    port: '{{ etherpad_port }}'
    timeout: 30
  tags: [ 'role::etherpad:api' ]

- name: Get the generated API key
  command: cat {{ etherpad_api_key_file }}
  register: etherpad_api_key
  changed_when: False
  always_run: yes
  tags: [ 'role::etherpad:api', 'role::etherpad:api:call' ]

- name: Make API calls
  uri:
    url: 'http://localhost:{{ etherpad_port }}/api/{{ etherpad_api_version }}/{{ item.method }}?apikey={{ etherpad_api_key.stdout }}{% if item.args|d() %}{% for key, value in item.args.iteritems() %}{{ "&" + key + "=" + value }}{% endfor %}{% endif %}'
  register: etherpad_api_calls_exec
  ## error while evaluating conditional???
  # failed_when: etherpad_api_calls_exec.rc != 0 or etherpad_api_calls_exec.json.code|d()
  with_items: etherpad_api_calls
  no_log: True
  tags: [ 'role::etherpad:api', 'role::etherpad:api:call' ]

- name: Display API call responses for debugging
  debug: var=etherpad_api_calls_exec
  when: etherpad_api_calls_exec|d() and etherpad_api_calls_debug
  tags: [ 'role::etherpad:api', 'role::etherpad:api:call' ]
