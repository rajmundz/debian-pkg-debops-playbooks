---

- name: Add upstream PostgreSQL APT key
  apt_key:
    id: '7FCC7D46ACCC4CF8'
    state: 'present'
    keyserver: '{{ ansible_local.core.keyserver
                   if (ansible_local|d() and ansible_local.core|d() and
                       ansible_local.core.keyserver)
                   else "hkp://pool.sks-keyservers.net" }}'
  when: postgresql_upstream|d() and postgresql_upstream

- name: Add upstream PostgreSQL APT repository
  apt_repository:
    repo: 'deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main'
    state: 'present'
    update_cache: True
  when: postgresql_upstream|d() and postgresql_upstream

- name: Get default PostgreSQL version
  environment:
    LC_ALL: 'C'
  shell: "apt-cache policy postgresql-client | grep -E '^\\s+Candidate:\\s+' | awk '{print $2}' | cut -d+ -f1"
  register: postgresql_register_version
  changed_when: False

- name: Set default PostgreSQL version variable
  set_fact:
    postgresql_version: '{{ ansible_local.postgresql.version
                                   if (ansible_local|d() and ansible_local.postgresql|d() and
                                       ansible_local.postgresql.version|d())
                                   else postgresql_register_version.stdout }}'

- name: Install PostgreSQL packages
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_flattened:
    - postgresql_base_packages
    - postgresql_packages

- name: Check if database server is installed
  environment:
    LC_MESSAGES: 'C'
  shell: dpkg-query -W -f='${Version}\n' 'postgresql' | grep -v '^$'
  register: postgresql_register_server
  changed_when: False
  failed_when: False

- name: Configure system-wide user to cluster mapping
  template:
    src: 'etc/postgresql-common/user_clusters.j2'
    dest: '/etc/postgresql-common/user_clusters'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Create PostgreSQL roles
  postgresql_user:
    name: '{{ item.name | d(item.role) }}'
    port: '{{ item.port | d(postgresql_port if postgresql_port else omit) }}'
    password: '{{ item.password | d(lookup("password",
                  secret + "/postgresql/" + postgresql_delegate_to +
                  "/" + (item.port | d(postgresql_port)) +
                  "/credentials/" + item.name | d(item.role) + "/password " +
                  "length=" + postgresql_password_length)) }}'
    encrypted: '{{ item.encrypted | d(omit) }}'
    expires: '{{ item.expires | d(omit) }}'
    role_attr_flags: '{{ (item.flags|d() | join(",")) | d(omit) }}'
    state: 'present'
  with_items: postgresql_roles
  sudo_user: '{{ postgresql_user }}'
  delegate_to: '{{ postgresql_delegate_to }}'
  when: (((item.name|d() and item.name) or (item.role|d() and item.role)) and
         (item.state is undefined or item.state != 'absent'))

- name: Create PostgreSQL databases
  postgresql_db:
    name: '{{ item.name | d(item.database) }}'
    port: '{{ item.port | d(postgresql_port if postgresql_port else omit) }}'
    owner: '{{ item.owner | d(omit) }}'
    template: '{{ item.template | d(omit) }}'
    encoding: '{{ item.encoding | d(omit) }}'
    lc_collate: '{{ item.lc_collate | d(omit) }}'
    lc_ctype: '{{ item.lc_ctype | d(omit) }}'
    state: 'present'
  with_items: postgresql_databases
  sudo_user: '{{ postgresql_user }}'
  delegate_to: '{{ postgresql_delegate_to }}'
  when: (((item.name|d() and item.name) or (item.database|d() and item.database)) and
         (item.state is undefined or item.state != 'absent'))

- name: Grant public schema permissions
  postgresql_privs:
    roles: '{{ item.owner }}'
    port: '{{ item.port | d(postgresql_port if postgresql_port else omit) }}'
    type: 'schema'
    database: '{{ item.name | d(item.database) }}'
    objs: 'public'
    privs: 'ALL'
    grant_option: 'yes'
    state: 'present'
  with_items: postgresql_databases
  sudo_user: '{{ postgresql_user }}'
  delegate_to: '{{ postgresql_delegate_to }}'
  when: (((item.name|d() and item.name) or (item.database|d() and item.database)) and
         (item.state is undefined or item.state != 'absent') and
         (item.owner|d() and item.owner))

- name: Grant PostgreSQL groups
  postgresql_privs:
    roles: '{{ item.roles | join(",") }}'
    port: '{{ item.port | d(postgresql_port if postgresql_port else omit) }}'
    type: 'group'
    database: '{{ item.database }}'
    objs: '{{ item.groups | join(",") }}'
    grant_option: '{{ item.grant_option | d(omit) }}'
    state: 'present'
  with_items: postgresql_groups
  sudo_user: '{{ postgresql_user }}'
  delegate_to: '{{ postgresql_delegate_to }}'
  when: ((item.roles|d() and item.roles) and
         (item.groups|d() and item.groups) and
         (item.database|d() and item.database) and
         (item.enabled is undefined or item.enabled|bool))

- name: Grant database privileges to PostgreSQL roles
  postgresql_user:
    name: '{{ item.name | d(item.role) }}'
    port: '{{ item.port | d(postgresql_port if postgresql_port else omit) }}'
    db: '{{ item.db }}'
    priv: '{{ item.priv | join("/") }}'
    state: 'present'
  with_items: postgresql_roles
  sudo_user: '{{ postgresql_user }}'
  delegate_to: '{{ postgresql_delegate_to }}'
  when: (((item.name|d() and item.name) or (item.role|d() and item.role)) and
         (item.state is undefined or item.state != 'absent') and
         (item.db|d() and item.db) and
         (item.priv|d() and item.priv))

- name: Make sure required system groups exist
  group:
    name: '{{ item.group | d(item.owner) }}'
    state: 'present'
    system: '{{ item.system | d(True) }}'
  with_items: postgresql_pgpass
  when: item.owner|d() and item.owner

- name: Make sure required system accounts exist
  user:
    name: '{{ item.owner }}'
    group: '{{ item.group | d(item.owner) }}'
    home: '{{ item.home | d(omit) }}'
    state: 'present'
    system: '{{ item.system | d(True) }}'
  with_items: postgresql_pgpass
  when: item.owner|d() and item.owner

- name: Populate ~/.pgpass file
  lineinfile:
    dest: '{{ "~" + item.owner }}/.pgpass'
    regexp: '^{{ (item.server | d(postgresql_server if postgresql_server else "localhost")) | replace(".","\.") }}:{{ item.port | d(postgresql_port) }}:{{ item.database | d("*") }}:{{ item.role | d("*") }}:'
    line: '{{ item.server | d(postgresql_server if postgresql_server else "localhost") }}:{{ item.port | d(postgresql_port) }}:{{ item.database | d("*") }}:{{ item.role | d(item.owner) }}:{{ item.password | d(lookup("password", secret + "/postgresql/" + (item.server | d(postgresql_server if postgresql_server else ansible_fqdn)) + "/" + (item.port | d(postgresql_port)) + "/credentials/" + item.name | d(item.role | d(item.owner)) + "/password length=" + postgresql_password_length)) }}'
    state: 'present'
    create: True
    owner: '{{ item.owner }}'
    group: '{{ item.owner }}'
    mode: '0600'
  with_items: postgresql_pgpass
  when: item.owner|d() and item.owner

- name: Make sure that Ansible local fact directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Save PostgreSQL local facts
  template:
    src: 'etc/ansible/facts.d/postgresql.fact.j2'
    dest: '/etc/ansible/facts.d/postgresql.fact'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: postgresql_register_local_facts

- name: Re-read local facts if they have been changed
  action: setup
  when: postgresql_register_local_facts|d() and
        postgresql_register_local_facts.changed

