---

# ---- git clone && git checkout ----

- name: Create GitLab source directory
  file:
    path: '{{ gitlab_src_path }}'
    state: 'directory'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0750'

- name: Clone GitLab CE source code
  git:
    repo: '{{ gitlab_ce_git_repo }}'
    dest: '{{ gitlab_ce_git_dest }}'
    bare: True
    update: True
  sudo_user: '{{ gitlab_user }}'
  register: gitlab_register_ce_source

- name: Check if GitLab CE is checked out
  stat:
    path: '{{ gitlab_ce_git_checkout }}'
  register: gitlab_register_ce_directory

- name: Create GitLab CE checkout directory
  file:
    path: '{{ gitlab_ce_git_checkout }}'
    state: 'directory'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0755'

- name: Prepare GitLab CE worktree
  copy:
    content: 'gitdir: {{ gitlab_ce_git_dest }}'
    dest: '{{ gitlab_ce_git_checkout + "/.git" }}'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0644'

- name: Get commit hash of target checkout
  shell: GIT_WORK_TREE={{ gitlab_ce_git_checkout }} git rev-parse {{ gitlab_version_map[gitlab_version].ce }}
         chdir={{ gitlab_ce_git_dest }}
  sudo_user: '{{ gitlab_user }}'
  register: gitlab_register_ce_target_branch
  changed_when: gitlab_register_ce_target_branch.stdout != gitlab_register_ce_source.before

- include: gitlab_ce_pre_upgrade.yml
  when: ((ansible_local is defined and ansible_local.gitlab is defined and
          ansible_local.gitlab.installed is defined and ansible_local.gitlab.installed) and
         ((gitlab_register_ce_target_branch.stdout != gitlab_register_ce_source.before) or
         (ansible_local.gitlab.version is defined and ansible_local.gitlab.version != gitlab_version)))

- name: Checkout GitLab CE
  shell: GIT_WORK_TREE={{ gitlab_ce_git_checkout }} git checkout -f {{ gitlab_version_map[gitlab_version].ce }}
         chdir={{ gitlab_ce_git_dest }}
  sudo_user: '{{ gitlab_user }}'
  register: gitlab_register_ce_checkout
  when: (gitlab_register_ce_source.before is undefined or
         (gitlab_register_ce_source.before is defined and
          gitlab_register_ce_target_branch.stdout is defined and
          gitlab_register_ce_source.before != gitlab_register_ce_target_branch.stdout))

- name: Manage other GitLab CE directories
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0755'
  with_items: [ '{{ gitlab_ce_git_checkout + "/tmp" }}',
                '{{ gitlab_ce_git_checkout + "/log" }}',
                '{{ gitlab_ce_git_checkout + "/tmp/pids" }}',
                '{{ gitlab_ce_git_checkout + "/tmp/sockets" }}',
                '{{ gitlab_ce_git_checkout + "/public/uploads" }}' ]

- name: Manage secure GitLab directories
  file:
    path: '{{ item }}'
    state: 'directory'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0750'
  with_items: [ '{{ gitlab_backup_path }}',
                '{{ gitlab_repositories_path }}',
                '{{ gitlab_satellites_path }}' ]


# ---- Database configuration ----

- name: Configure GitLab CE database
  template:
    src: 'var/local/git/gitlab/config/database.{{ gitlab_database }}.yml.j2'
    dest: '{{ gitlab_ce_git_checkout + "/config/database.yml" }}'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0600'
  notify: [ 'Restart gitlab' ]


# ---- Application configuration ----

- name: Setup GitLab CE main configuration
  template:
    src: 'var/local/git/gitlab/config/gitlab.yml.j2'
    dest: '{{ gitlab_ce_git_checkout + "/config/gitlab.yml" }}'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0600'
  notify: [ 'Restart gitlab' ]

- name: Configure custom redis server
  lineinfile:
    dest: '{{ gitlab_ce_git_checkout + "/config/resque.yml" }}'
    regexp: '^production:'
    line: 'production: {{ gitlab_redis }}'
    state: 'present'
    create: True
    backup: False
  notify: [ 'Restart gitlab' ]

- name: Setup GitLab CE unicorn configuration
  template:
    src: 'var/local/git/gitlab/config/unicorn.rb.j2'
    dest: '{{ gitlab_ce_git_checkout + "/config/unicorn.rb" }}'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0644'
  notify: [ 'Restart gitlab' ]

- name: Setup GitLab CE rack_attack configuration
  template:
    src: 'var/local/git/gitlab/config/initializers/rack_attack.rb.j2'
    dest: '{{ gitlab_ce_git_checkout + "/config/initializers/rack_attack.rb" }}'
    owner: '{{ gitlab_user }}'
    group: '{{ gitlab_group }}'
    mode: '0644'
  notify: [ 'Restart gitlab' ]

- name: Setup GitLab CE default variables
  template:
    src: 'etc/default/gitlab.j2'
    dest: '/etc/default/gitlab'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart gitlab' ]

- name: Install GitLab service script
  shell: cp -f {{ gitlab_ce_git_checkout + "/lib/support/init.d/gitlab" }} /etc/init.d/gitlab
  when: gitlab_register_ce_checkout is defined and gitlab_register_ce_checkout.changed

- name: Enable GitLab service
  service:
    name: 'gitlab'
    enabled: True
  when: gitlab_register_ce_checkout is defined and gitlab_register_ce_checkout.changed

- name: Setup GitLab CE logrotate configuration
  template:
    src: 'etc/logrotate.d/gitlab.j2'
    dest: '/etc/logrotate.d/gitlab'
    owner: 'root'
    group: 'root'
    mode: '0644'


# ---- GitLab installation / upgrade ----

- name: Update Ruby gems
  shell: bundle install --deployment --without {{ gitlab_ce_bundle_install_without[gitlab_database] }}
         chdir={{ gitlab_ce_git_checkout }}
  sudo_user: '{{ gitlab_user }}'
  when: gitlab_register_ce_checkout is defined and gitlab_register_ce_checkout.changed

- name: Set default administrator email address and password
  replace:
    dest: '{{ gitlab_ce_git_checkout + "/db/fixtures/production/001_admin.rb" }}'
    regexp: '{{ item.0 }}'
    replace: '{{ item.1 }}'
  with_together:
    - [ 'admin@example\.com', '5iveL!fe' ]
    - [ '{{ gitlab_admin_email }}', '{{ gitlab_admin_password }}' ]
  no_log: True
  when: (ansible_local is undefined or (ansible_local is defined and
         (ansible_local.gitlab is undefined or (ansible_local.gitlab is defined and
          (ansible_local.gitlab.installed is undefined or (ansible_local.gitlab.installed is defined and
           not ansible_local.gitlab.installed))))))

- name: Initialize GitLab database
  shell: yes 'yes' | bundle exec rake gitlab:setup RAILS_ENV=production
         chdir={{ gitlab_ce_git_checkout }}
  sudo_user: '{{ gitlab_user }}'
  register: gitlab_register_bundle_setup
  when: ((ansible_local is undefined or (ansible_local is defined and
          (ansible_local.gitlab is undefined or (ansible_local.gitlab is defined and
           (ansible_local.gitlab.installed is undefined or (ansible_local.gitlab.installed is defined and
            not ansible_local.gitlab.installed)))))) and
         gitlab_register_ce_checkout is defined and gitlab_register_ce_checkout.changed)

- name: Reset default administrator email address and password
  replace:
    dest: '{{ gitlab_ce_git_checkout + "/db/fixtures/production/001_admin.rb" }}'
    regexp: '{{ item.0 }}'
    replace: '{{ item.1 }}'
  with_together:
    - [ '{{ gitlab_admin_email | replace(".","\.") }}', '{{ gitlab_admin_password }}' ]
    - [ 'admin@example.com', '5iveL!fe' ]
  no_log: True
  when: (ansible_local is undefined or (ansible_local is defined and
         (ansible_local.gitlab is undefined or (ansible_local.gitlab is defined and
          (ansible_local.gitlab.installed is undefined or (ansible_local.gitlab.installed is defined and
           not ansible_local.gitlab.installed))))))

- name: Migrate GitLab database
  shell: bundle exec rake db:migrate RAILS_ENV=production
         chdir={{ gitlab_ce_git_checkout }}
  sudo_user: '{{ gitlab_user }}'
  register: gitlab_register_bundle_migrate
  notify: [ 'Restart gitlab' ]
  when: ((ansible_local is defined and ansible_local.gitlab is defined and
          ansible_local.gitlab.installed) and
         gitlab_register_ce_checkout is defined and gitlab_register_ce_checkout.changed)

- name: Clean GitLab assets
  shell: bundle exec rake assets:clean RAILS_ENV=production
         chdir={{ gitlab_ce_git_checkout }}
  sudo_user: '{{ gitlab_user }}'
  when: ((ansible_local is defined and ansible_local.gitlab is defined and
          ansible_local.gitlab.installed) and
         gitlab_register_bundle_migrate is defined and gitlab_register_bundle_migrate.changed)

- name: Precompile GitLab assets
  shell: bundle exec rake assets:precompile RAILS_ENV=production
         chdir={{ gitlab_ce_git_checkout }}
  sudo_user: '{{ gitlab_user }}'
  notify: [ 'Restart gitlab' ]
  when: (gitlab_register_bundle_setup is defined and gitlab_register_bundle_setup.changed) or
        (gitlab_register_bundle_migrate is defined and gitlab_register_bundle_migrate.changed)

- name: Clear GitLab cache
  shell: bundle exec rake cache:clear RAILS_ENV=production
         chdir={{ gitlab_ce_git_checkout }}
  sudo_user: '{{ gitlab_user }}'
  when: ((ansible_local is defined and ansible_local.gitlab is defined and
          ansible_local.gitlab.installed) and
         gitlab_register_bundle_migrate is defined and gitlab_register_bundle_migrate.changed)

- name: Start GitLab instance
  service:
    name: 'gitlab'
    state: 'started'
  notify: [ 'Deactivate GitLab deploy.html page' ]
  when: (ansible_local is undefined or (ansible_local is defined and
         (ansible_local.gitlab is undefined or (ansible_local.gitlab is defined and
          (ansible_local.gitlab.installed is undefined or (ansible_local.gitlab.installed is defined and
           not ansible_local.gitlab.installed))))))

- name: Configure periodical GitLab backups
  cron:
    name: 'Create GitLab backup'
    special_time: '{{ gitlab_backup_frequency }}'
    state: 'present'
    user: '{{ gitlab_user }}'
    job: 'cd {{ gitlab_ce_git_checkout }} ; PATH=/usr/local/bin:/usr/bin:/bin bundle exec rake gitlab:backup:create RAILS_ENV=production CRON=1'
    cron_file: 'gitlab-backup'

