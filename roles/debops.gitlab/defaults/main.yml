---


# --------------------
#   Basic options
# --------------------

# .. envvar:: gitlab_dependencies
#
# Should the ``debops.gitlab`` role manage it's own dependencies (database, web server)?
gitlab_dependencies: True


# .. envvar:: gitlab_version
#
# What version of GitLab to install / manage
gitlab_version: '8.6'


# ---------------------------------
#   GitLab instance configuration
# ---------------------------------

# .. envvar:: gitlab_domain
#
# Domain which will be used for nginx server and gitlab-shell access
# GitLab will be configured with HTTPS enabled by default
gitlab_domain: [ 'code.{{ ansible_domain }}' ]


# .. envvar:: gitlab_nginx_auth_realm
#
# Webserver authentication realm
gitlab_nginx_auth_realm: 'GitLab access is restricted'


# .. envvar:: gitlab_nginx_access_policy
#
# Name of webserver access policy to enable. Refer to ``debops.nginx`` for
# details.
gitlab_nginx_access_policy: ''


# .. envvar:: gitlab_email_display_name
#
# E-mail sender name used by GitLab
gitlab_email_display_name: 'GitLab'


# .. envvar:: gitlab_email_from
#
# E-mail address used by GitLab
gitlab_email_from: 'git@{{ gitlab_domain[0] }}'


# .. envvar:: gitlab_email_reply_to
#
# E-mail Reply-To address added to GitLab mails
gitlab_email_reply_to: 'admin+gitlab@{{ ansible_domain }}'


# .. envvar:: gitlab_admin_email
#
# Default admin account email
gitlab_admin_email: 'admin@{{ ansible_domain }}'


# .. envvar:: gitlab_admin_password
#
# Default admin account password
gitlab_admin_password: '{{ lookup("password", secret + "/credentials/" + ansible_fqdn + "/gitlab/admin/password chars=ascii,numbers") }}'


# .. envvar:: gitlab_enable_git_http_server
#
# In GitLab 8.0 and newer there is separate server for git
gitlab_enable_git_http_server: '{{ gitlab_version | version_compare("8.0", operator="ge", strict=True) and not gitlab_enable_gitlab_workhorse | bool }}'

# .. envvar:: gitlab_enable_gitlab_workhorse
#
# In GitLab 8.2 and newer, gitlab-workhorse replaces gitlab-git-http-server
gitlab_enable_gitlab_workhorse: '{{ gitlab_version | version_compare("8.2", operator="ge", strict=True) }}'


# --------------------------
#   New user configuration
# --------------------------

# .. envvar:: gitlab_default_can_create_group
#
# Should new users be able to create groups?
gitlab_default_can_create_group: 'true'


# .. envvar:: gitlab_username_changing_enabled
#
# Can users change their own username?
gitlab_username_changing_enabled: 'false'


# .. envvar:: gitlab_default_theme
#
# Default GitLab theme to use
gitlab_default_theme: '2'


# --------------------------
#   Database configuration
# --------------------------

# .. envvar:: gitlab_database
#
# What database to use for GitLab instance? Choices: mariadb, postgresql
# Currently only MySQL/MariaDB is supported.
# To choose beteween MySQL and MariaDB you have to set mariadb_server_flavor from debops.mariadb_server role.
gitlab_database: 'mariadb'


# .. envvar:: gitlab_database_server
#
# FQDN of the database server. It will be configured by
# the ``debops.mariadb`` or ``debops.postgresql`` role.
gitlab_database_server: "{{ ansible_local[gitlab_database].server }}"


# .. envvar:: gitlab_database_port
#
# Port database is listening on.
gitlab_database_port: "{{ ansible_local[gitlab_database].port }}"


# .. envvar:: gitlab_database_user
#
# Database user to use for GitLab.
gitlab_database_user: 'gitlab'


# .. envvar:: gitlab_database_name
#
# Name of the database to use for GitLab.
gitlab_database_name: 'gitlabhq_production'


# .. envvar:: gitlab_database_password_path
#
# Path to database password file.
gitlab_database_password_path: "{{ secret + '/' + gitlab_database + '/' +
                                   ansible_local[gitlab_database].delegate_to }}{%
                                     if gitlab_database=='postgresql' %}/{{ ansible_local[gitlab_database].port }}{% endif
                                   %}{{ '/credentials/' + gitlab_database_user +
                                   '/password' }}"

# .. envvar:: gitlab_database_password
#
# Database password for GitLab.
gitlab_database_password: "{{ lookup('password', gitlab_database_password_path + ' length=48 chars=ascii_letters,digits,.:-_') }}"

# .. envvar:: gitlab_postgresql_database_connection
#
# Connection type for PostgreSQL database (choices: socket, port)
# FIXME: not supported yet
gitlab_postgresql_database_connection: 'socket'


# ------------------------
#   Backup configuration 
# ------------------------

# .. envvar:: gitlab_backup_frequency
#
# Backup frequency (daily, weekly, monthly)
gitlab_backup_frequency: 'daily'


# .. envvar:: gitlab_backup_keep_time
#
# How long to store backups for, in seconds
gitlab_backup_keep_time: '{{ (60 * 60 * 24 * 7) }}'


# ------------------------------
#   Custom redis configuration
# ------------------------------

# .. envvar:: gitlab_redis
#
# Connection string used in the configuration file
gitlab_redis: 'redis://{{ gitlab_redis_host + ":" + gitlab_redis_port }}'


# .. envvar:: gitlab_redis_host
#
# Define hostname of redis server to use
gitlab_redis_host: 'localhost'


# .. envvar:: gitlab_redis_port
#
# Define port of redis server to use
gitlab_redis_port: '6379'


# ---------------------------
#   GitLab directory layout
# ---------------------------

# .. envvar:: gitlab_home
#
# Home directory
gitlab_home: '{{ ansible_local.root.home + "/" + gitlab_user }}'


# .. envvar:: gitlab_app_root_path
#
# Application installation directory
gitlab_app_root_path: '{{ ansible_local.root.app + "/" + gitlab_user }}'


# .. envvar:: gitlab_repositories_path
#
# GitLab repositories
gitlab_repositories_path: '{{ ansible_local.root.data + "/gitlab/repositories" }}'


# .. envvar:: gitlab_satellites_path
#
# GitLab satellites
gitlab_satellites_path: '{{ ansible_local.root.data + "/gitlab/satellites" }}'


# .. envvar:: gitlab_backup_path
#
# Backup path
gitlab_backup_path: '{{ ansible_local.root.backup + "/gitlab" }}'


# .. envvar:: gitlab_src_path
#
# GitLab sources root path
gitlab_src_path: '{{ ansible_local.root.src + "/gitlab" }}'


# ---------------------------------
#   Internal application settings
# ---------------------------------

# .. envvar:: gitlab_user
#
# System user for GitLab instance
gitlab_user: 'git'


# .. envvar:: gitlab_group
#
# System group for GitLab instance
gitlab_group: 'git'


# .. envvar:: gitlab_user_append_groups
#
# List of additional system groups to add to the GitLab user account
# 'sshusers' is used in DebOps to limit sshd access. See 'debops.auth' role
gitlab_user_append_groups: [ 'sshusers' ]


# .. envvar:: gitlab_time_zone
#
# Server timezone
gitlab_time_zone: 'UTC'



# .. envvar:: gitlab_nginx_client_max_body_size
#
# nginx client_max_body_size value
gitlab_nginx_client_max_body_size: '5m'


# .. envvar:: gitlab_nginx_proxy_timeout
#
# nginx - gitlab proxy timeout in seconds
gitlab_nginx_proxy_timeout: '300'


# .. envvar:: gitlab_git_max_size
#
# Max git upload size in bytes
gitlab_git_max_size: '{{ (1024 * 1024 * 20) }}'


# .. envvar:: gitlab_git_timeout
#
# git connection timeout in seconds
gitlab_git_timeout: '10'


# .. envvar:: gitlab_unicorn_port
#
# Unicorn port on localhost interface for GitLab
gitlab_unicorn_port: '18082'


# .. envvar:: gitlab_unicorn_timeout
#
# unicorn connection timeout in seconds
gitlab_unicorn_timeout: '60'


# .. envvar:: gitlab_passenger_options
#
# Additional options for Phusion Passenger as text block
gitlab_passenger_options: ''


# .. envvar:: gitlab_shell_ssh_port
#
# SSH port for GitLab Shell
# (does not affect sshd port setting)
gitlab_shell_ssh_port: '22'

# -----------------------------
#   Compatibility workarounds 
# -----------------------------

# .. envvar:: gitlab_support_filesystem_acl
#
# Enable or disable ACL configuration for the webserver
gitlab_support_filesystem_acl: True


# --------------------------------------------
#   GitLab LDAP Authentication configuration
# --------------------------------------------

# .. envvar:: gitlab_ldap_enable
#
gitlab_ldap_enable: false


# .. envvar:: gitlab_ldap_domain
#
gitlab_ldap_domain: '{{ ansible_domain }}'


# .. envvar:: gitlab_ldap_label
#
gitlab_ldap_label: '{{ gitlab_ldap_domain }}'


# .. envvar:: gitlab_ldap_basedn
#
gitlab_ldap_basedn: '{{ "dc=" + gitlab_ldap_domain.split(".") | join(",dc=") }}'


# .. envvar:: gitlab_ldap_binddn
#
gitlab_ldap_binddn: '{{ "cn=gitlab," + secret_ldap_services_dn }}'


# .. envvar:: gitlab_ldap_uid
#
gitlab_ldap_uid: 'uid'


# .. envvar:: gitlab_ldap_host
#
gitlab_ldap_host: 'ldap.{{ ansible_domain }}'


# .. envvar:: gitlab_ldap_password_file
#
gitlab_ldap_password_file: '{{ secret + "/credentials/" + gitlab_ldap_host + "/slapd/" + gitlab_ldap_basedn + "/" + gitlab_ldap_binddn + ".password" }}'


# .. envvar:: gitlab_ldap_password
#
gitlab_ldap_password: '{{ lookup("password", gitlab_ldap_password_file) }}'


# .. envvar:: gitlab_ldap_port
#
gitlab_ldap_port: '389'


# .. envvar:: gitlab_ldap_method
#
gitlab_ldap_method: 'tls'


# .. envvar:: gitlab_ldap_activedirectory
#
gitlab_ldap_activedirectory: false

