---

# List of Debian/Ubuntu packages installed by debops.auth
auth_packages: [ 'sudo', 'libpam-cracklib' ]

# System group that will be granted unrestricted access to root account
auth_wheel_group: 'admins'

# List of default system accounts that are used in the playbook
auth_system_groups:

  # Global system administrators, unrestricted root access, unrestricted SSH
  - 'admins'

  # Users in this group can connect to the host using SSH service
  - 'sshusers'

  # Users in this group have access only to chrooted SFTP service (without full
  # shell access) and cannot use SSH public keys in ~/.ssh/authorized_keys file
  # (only keys in '/etc/ssh/authorized_keys.d/user' are allowed)
  - 'sftponly'

  # Users in this group can reload nginx service using sudo and have access to
  # /etc/nginx/sites-local/ directory where they can put nginx vhost
  # configuration files to be enabled by Ansible in nginx
  # (this might be moved to 'nginx' role in the future)
  - 'webadmins'

  # This group grants full access to /proc filesystem when hidepid= option is
  # active. You should add monitoring services to this group if they need full
  # access to process information
  - 'procadmins'


# ---- nsswitch.conf options ----

# List of lookup databases that will be enabled in /etc/nsswitch.conf.
# Possible parameters: compat, files, ldap, sss, mdns
auth_nsswitch: [ 'compat' ]


# ---- Local user account configuration ----

# Default umask for home directories of newly created user accounts
auth_shadow_umask: '0027'

# Size of local password history, set to False to disable
auth_pwhistory_remember: '5'

# Enable password checking via cracklib
auth_cracklib: True


# ---- /etc/ldap/ldap.conf options ----

# Enable or disable /etc/ldap/ldap.conf configuration
auth_ldap_conf: True

# Default DNS domain to use to generate base DN. Set to False to disable and
# configure custom BaseDN in 'auth_ldap_conf_hostdn'
auth_ldap_conf_domain: '{{ ansible_domain }}'

# Custom prefix for base DN, each domain component should be an element of
# a list. If 'auth_ldap_conf_domain' is empty or False, you can configure here
# full base DN for your LDAP server
auth_ldap_conf_hostdn: []

# List od LDAP servers accessed by this host. See ldap.conf(5) for details
auth_ldap_conf_uri: [ 'ldaps://ldap.{{ ansible_domain }}/' ]

# CA certificate bundle used to authorize server certificates
auth_ldap_conf_tls_cacert: '/etc/ssl/certs/ca-certificates.crt'

# Level of certificate checking performed by ldap-utils (never, allow, try, demand)
auth_ldap_conf_tls_reqcert: 'demand'

# Other LDAP options in text block format
auth_ldap_conf_options: |
  SISZELIMIT       12
  TIMELIMIT        15
  DEREF            never


# ---- Local LDAP Name Service Daemon ----

# Base domain to use for nslcd configuration
auth_nslcd_domain: '{{ ansible_domain }}'

# FQDN address of a LDAP server to configure in /etc/nslcd.conf
auth_nslcd_ldap_server: 'ldap.{{ auth_nslcd_domain }}'

# List of LDAP servers to connect to
auth_nslcd_uri: [ 'ldap://{{ auth_nslcd_ldap_server }}/' ]

# List of LDAP search bases to use
auth_nslcd_base: [ '{{ "dc=" + auth_nslcd_domain.split(".") | join(",dc=") }}' ]

# Level of certificate checking performed by nslcd (never, allow, try, demand)
auth_nslcd_tls_reqcert: 'demand'

# CA certficiate file to use to check server certificates
auth_nslcd_tls_cacertfile: '/etc/ssl/certs/ca-certificates.crt'


# ---- LDAP host account ----

# A separate LDAP host account is required for by each host to have access to
# the LDAP database, because anonymous connections are denied.

# Base DN to use for host account
auth_nslcd_bind_host_basedn: '{{ "ou=Machines," + auth_nslcd_base[0] }}'

# Host account name
auth_nslcd_bind_host_cn: 'cn={{ ansible_hostname }}'

# Host account in LDAP database
auth_nslcd_bind_host_dn: '{{ auth_nslcd_bind_host_cn + "," + auth_nslcd_bind_host_basedn }}'

# Base path to host password in 'secret/' directory.
# See 'debops.secret' Ansible role for more detauls.
auth_nslcd_bind_host_basepw: '{{ secret + "/credentials/" + ansible_fqdn + "/ldap/host/binddn/" + auth_nslcd_bind_host_dn }}'

# Path to file with plaintext host password saved in secrets
auth_nslcd_bind_host_password: '{{ auth_nslcd_bind_host_basepw + ".password" }}'

# Path to file with Hash of host password saved in secrets
auth_nslcd_bind_host_hash: '{{ auth_nslcd_bind_host_basepw + ".hash" }}'

# Length of generated host password
auth_nslcd_password_length: '48'

# Additional options added to /etc/nslcd.conf, in a text block
auth_nslcd_options: False


# ---- NSS LDAP authentication and filters ----

# Minimal uidNumber which is considered for an LDAP query
auth_nslcd_nss_min_uid: '1000'

# Default umask for new home directories created by pam_mkhomedir module
auth_pam_mkhomedir_umask: '0027'

# LDAP search filters which are used to limit access to the host or services.
# At least one search needs to return a valid entry, otherwise access is
# denied.
# Apparently this option can be specified multiple times in nslcd.conf but that
# didn't work. You still need to specify a list.
auth_nslcd_pam_authz_search: [ '{{ auth_nslcd_pam_authz_search_host_and_service }}' ]

# User account needs to have host= attribute
auth_nslcd_pam_authz_search_host: '(&(objectClass=posixAccount)(uid=$username)(|(host=$hostname)(host=$fqdn)(host=\\*.{{ ansible_domain }})(host=\\*)))'

# User account needs to to have authorizedService= attribute
auth_nslcd_pam_authz_search_service: '(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service))'

# User account needs to have both host= and authorizedService= attributes
auth_nslcd_pam_authz_search_host_and_service: '(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service)(|(host=$hostname)(host=$fqdn)(host=\\*.{{ ansible_domain }})(host=\\*)))'

