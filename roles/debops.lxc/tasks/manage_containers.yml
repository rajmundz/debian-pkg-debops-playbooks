---

- name: Get list of existing LXC containers
  command: lxc-ls
  changed_when: False
  register: lxc_register_existing_containers

- name: Generate temporary configuration for new containers
  template:
    src: 'tmp/container.conf.j2'
    dest: '/tmp/lxc_temp_{{ item.name }}.conf'
    owner: 'root'
    group: 'root'
    mode: '0600'
  with_items: lxc_containers
  when: ((item.name is defined and item.name) and
         (item.name not in lxc_register_existing_containers.stdout_lines) and
         (item.state is undefined or (item.state is defined and item.state != 'absent')))

- name: Generate temporary appended configuration for new containers
  template:
    src: 'tmp/container_append.conf.j2'
    dest: '/tmp/lxc_temp_{{ item.name }}_append.conf'
    owner: 'root'
    group: 'root'
    mode: '0600'
  with_items: lxc_containers
  when: ((item.name is defined and item.name) and
         (item.name not in lxc_register_existing_containers.stdout_lines) and
         (item.state is undefined or (item.state is defined and item.state != 'absent')))

- name: Create LXC containers
  command: lxc-create -n {{ item.name }} -t {{ item.template | default(lxc_default_template) }}
           {% if item.config is undefined %}
           {% if item.network is defined and item.network %}
           -f /etc/lxc/{{ item.network }}.conf
           {% endif %}
           {% elif item.config is defined and item.config == True %}
           -f /tmp/lxc_temp_{{ item.name }}.conf
           {% elif item.config is defined and item.config %}
           -f {{ item.config }}
           {% endif %}
           {% if item.storage is defined and item.storage %}
           -B {{ item.storage }}
           {% endif %}
           {% if item.template_options is defined and item.template_options %}
           -- {{ item.template_options }}
           {% endif %}
           creates={{ lxc_root_path + '/' + item.name }}/config
  with_items: lxc_containers
  when: ((item.name is defined and item.name) and
         (item.state is undefined or (item.state is defined and item.state != 'absent')))

- name: Remove temporary configuration files
  file:
    dest: '/tmp/lxc_temp_{{ item.name }}.conf'
    state: 'absent'
  with_items: lxc_containers

- name: Remove temporary append configuration files
  file:
    dest: '/tmp/lxc_temp_{{ item.name }}_append.conf'
    state: 'absent'
  with_items: lxc_containers

- name: Check status of existing LXC containers
  shell: lxc-info -s -n {{ item.name }} | awk '{print $2}'
  register: lxc_register_container_status
  changed_when: False
  with_items: lxc_containers
  when: (item.name is defined and item.name)

- name: Stop LXC containers when requested
  command: lxc-stop -n {{ item.0.name }}
  with_together:
    - lxc_containers
    - lxc_register_container_status.results
  when: ((item.0.name is defined and item.0.name) and
         (item.1.item.name is defined and item.0.name == item.1.item.name) and
         (item.0.state is defined and item.0.state in ['stopped','absent']) and
         (item.1.stdout_lines[0] == 'RUNNING'))

- name: Destroy LXC containers when requested
  command: lxc-destroy -n {{ item.name }} removes={{ lxc_root_path + '/' + item.name }}/config
  with_items: lxc_containers
  when: ((item.name is defined and item.name) and
         (item.state is defined and item.state == 'absent'))

- name: Start LXC containers when requested
  command: lxc-start -d -n {{ item.0.name }}
  with_together:
    - lxc_containers
    - lxc_register_container_status.results
  when: ((item.0.name is defined and item.0.name) and
         (item.1.item.name is defined and item.0.name == item.1.item.name) and
         (item.0.state is defined and item.0.state in ['started']) and
         (item.1.stdout_lines[0] == 'STOPPED'))

