---

# ---- Required configuration variables ----

# Name of a package to build
backporter_package: ""

# What package version should be available in APT repositories?
backporter_version: ""


# ---- Common configuration variables ----

# If a package to backport is not present in current APT repositoriesA, version
# comparsion with required package will fail. In that case you can fake
# non-existent version number to force backport of the package (keep it much
# lower than existing packages to be compatible with future releases).
backporter_fake_version: ""

# Name of a source package to build from (usually the same as the package)
backporter_source_package: '{{ backporter_package }}'

# List of required packages to install before build
backporter_prerequisites: []

# Fallback version number of source package to use in case rmadison service is
# inaccessible
backporter_source_version: ""

# Regexp to use to find orig tarball in build directory (by default Debian uses
# .tar.xz format but it might be different)
backporter_source_orig: '.orig.tar.xz'

# Which Debian component to look in for a package source
backporter_component: 'main'

# What comparsion to use to check for available package version? By default
# check if package available is older than the package you are requesting
backporter_comparsion: '<'

# List of regexps used to find created .deb packages which will be installed on
# build host
backporter_install_packages: [ '{{ backporter_package }}_*.deb' ]

# List of regexps used to find created .deb packages which will be uploaded to
# Ansible Controller host (in 'secret' directory) to include in local reprepro
# repositories
backporter_upload_packages: '{{ backporter_install_packages }}'

# Send mail reminder to administrator about uploaded packages? If yes, specify
# list of mail recipients
backporter_mail_to: [ '{{ backporter_email }}' ]

# Specify a temporary directory where backported packages will be stored for
# later installation. Without 'backporter_package' set, specify directory where
# packages to install are stored.
backporter_cache: ""

# Delete cache directory after installation?
backporter_cache_clean: True


# ---- Backport configuration variables ----

# Maintainer name
backporter_maintainer: 'Automated Package Maintainer'

# Maintainer mail address (will receive information about new uploaded packages)
backporter_email: 'root@{{ ansible_domain }}'

# Base string to append to backported package version (will be used in
# changelog and name of .orig.tar.xz file)
backporter_new_version: '~bpo{{ ansible_distribution_version | replace(".","") }}'

# Full string to append to backported package version (will be used in
# changelog and finished .deb package names)
# Set this variable to False to not add any strings to package version
backporter_changelog_version: '{{ backporter_new_version }}+'

# Message included in changelog
backporter_changelog_message: 'Package rebuilt automatically by Ansible for local {{ backporter_release }}-backports repository.'


# ---- Backporter role internal variables ----

# Linux distribution and release which will trigger backport requirement tests
backporter_distribution: 'Debian'
backporter_release: '{% if ansible_distribution == "Debian" %}{{ ansible_distribution_release }}{% else %}jessie{% endif %}'

# Should package be backported regardless of wether it's currently available in
# APT repository?
backporter_force: False

# Address to a Debian mirror which will be used to download source packages
backporter_build_mirror: 'http://cdn.debian.net/debian'

# Name of next distribution release which will be used to check available
# package version (don't use suite names here, because backports make sense
# only for specific releases)
backporter_build_codename: '{{ backporter_next[backporter_release] }}'

# Length of the slice of source package name used to create path to source
# package (from the start of the string). If you are backporting a library, set
# this to 4 to use path like '.../main/liba/libansible/libansible_...'
backporter_source_package_slice: 1

# Part of URI to a source package (last part will be added during runtime after
# check for available versions)
backporter_source_path: '{{ backporter_build_mirror }}/pool/{{ backporter_component }}/{{ backporter_source_package[0:backporter_source_package_slice] }}/{{ backporter_source_package }}/{{ backporter_source_package }}'

# Path to directory on remote host where backported packages will be built
backporter_build_path: '/usr/local/src'

# Command used to download .dsc package sources. If you have problems with GPG
# key verification, set this to 'dget -u'
backporter_command_dget: 'dget'

# If a package that is backported does not exist in current Debian release, its
# build dependencies might not exist too and 'apt-get build-dep' step will fail.
# Instead enable this variable and provide all required dependencies in
# 'backporter_prerequisites' variable.
backporter_skip_builddep: False

# Should .deb packages that are created be automatically installed on build
# host?
backporter_install: True

# Should .deb packages that are created be automatically uploaded to Ansible
# Controller in a directory accessible by 'reprepro' role?
backporter_upload: True

# Path to a directory on Ansible Controller used by 'reprepro' role to download
# packages to local APT repository
backporter_upload_storage: '{{ secret + "/reprepro/includedeb/" + backporter_release + "-backports" }}'

# List of required Debian SDK packages to install on a host before backporting
backporter_sdk_packages: [ 'devscripts', 'build-essential', 'debian-keyring',
                           'liburi-perl', 'libdistro-info-perl', 'python-httplib2',
                           'curl', 'debhelper' ]

# List of source repositories to enable on a host
backporter_repositories:
  - 'deb-src {{ backporter_build_mirror }} {{ ansible_distribution_release }} main contrib'

