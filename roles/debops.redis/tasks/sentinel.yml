---

- name: Change ownership to 'redis' for the main Sentinel config
  file: path=/etc/redis/sentinel.conf
        owner=redis group=redis mode=0644

- name: Detect if this is the first time the role has been ran
  stat: path={{ redis_custom_sentinel_config }}
  register: redis_register_custom_sentinel_config

- name: Detect if maxmemory is in the main Sentinel config
  shell: grep '^maxmemory' {{ redis_sentinel_config }} || true
  changed_when: False
  register: redis_register_sentinel_maxmemory

- name: Remove values from the main Sentinel config
  lineinfile:
    regexp: '^sentinel {{ item }} mymaster'
    dest: '{{ redis_sentinel_config }}'
    state: 'absent'
  when: not redis_register_custom_sentinel_config.stat.exists
  with_items:
    - 'monitor'
    - 'parallel-syncs'
    - 'down-after-milliseconds'
    - 'failover-timeout'
  notify: ['Restart Redis Sentinel']

- name: Insert monitor lines to the main Sentinel config
  lineinfile:
    regexp: '^sentinel monitor {{ item.name }}'
    dest: '{{ redis_sentinel_config }}'
    line: 'sentinel monitor {{ item.name }} {{ item.host | default(groups[redis_hosts_group][0]) }} {{ item.port | default(redis_port) }} {{ item.quorum | default(2) }}'
    state: 'present'
  when: not redis_register_custom_sentinel_config.stat.exists
  with_items: '{{ redis_sentinel_group_list }}'
  notify: ['Restart Redis Sentinel']

- name: Insert failover-timeout lines to the main Sentinel config
  lineinfile:
    regexp: '^sentinel failover-timeout {{ item.name }}'
    dest: '{{ redis_sentinel_config }}'
    line: 'sentinel failover-timeout {{ item.name }} {{ item.failover_timeout | default(180000) }}'
    insertafter: 'sentinel monitor {{ item.name }}'
    state: 'present'
  when: not redis_register_custom_sentinel_config.stat.exists
  with_items: '{{ redis_sentinel_group_list }}'
  notify: ['Restart Redis Sentinel']

- name: Insert down-after-milliseconds lines to the main Sentinel config
  lineinfile:
    regexp: '^sentinel down-after-milliseconds {{ item.name }}'
    dest: '{{ redis_sentinel_config }}'
    line: 'sentinel down-after-milliseconds {{ item.name }} {{ item.down_after_milliseconds | default(30000) }}'
    insertafter: 'sentinel monitor {{ item.name }}'
    state: 'present'
  when: not redis_register_custom_sentinel_config.stat.exists
  with_items: '{{ redis_sentinel_group_list }}'
  notify: ['Restart Redis Sentinel']

- name: Insert parallel-syncs lines to the main Sentinel config
  lineinfile:
    regexp: '^sentinel parallel-syncs {{ item.name }}'
    dest: '{{ redis_sentinel_config }}'
    line: 'sentinel parallel-syncs {{ item.name }} {{ item.parallel_syncs | default(1) }}'
    insertafter: 'sentinel monitor {{ item.name }}'
    state: 'present'
  when: not redis_register_custom_sentinel_config.stat.exists
  with_items: '{{ redis_sentinel_group_list }}'
  notify: ['Restart Redis Sentinel']

- name: Remove include line from the middle of the main Sentinel config
  lineinfile:
    regexp: '^include {{ redis_custom_sentinel_config }}'
    dest: '{{ redis_sentinel_config }}'
    state: 'absent'
  changed_when: False

- name: Insert include line after the last variable in the main Sentinel config
  lineinfile:
    regexp: '^include {{ redis_custom_sentinel_config }}'
    dest: '{{ redis_sentinel_config }}'
    line: 'include {{ redis_custom_sentinel_config }}'
    insertafter: '^maxmemory'
    state: 'present'
  when: redis_register_sentinel_maxmemory.stdout
  changed_when: False

- name: Insert include line to the bottom of the main Sentinel config
  lineinfile:
    regexp: '^include {{ redis_custom_sentinel_config }}'
    dest: '{{ redis_sentinel_config }}'
    line: 'include {{ redis_custom_sentinel_config }}'
    insertafter: 'EOF'
    state: 'present'
  when: not redis_register_sentinel_maxmemory.stdout
  changed_when: False

- name: Configure Redis Sentinel
  template: src=etc/redis/sentinel-ansible.conf.j2
            dest={{ redis_custom_sentinel_config }}
            owner=root group=root mode=0644
  notify: ['Restart Redis Sentinel']

- name: Configure Redis Sentinel scripts
  template: src=usr/local/lib/redis/trigger.sh.j2
            dest={{ redis_dir }}/{{ item.1 }}.sh
            owner=redis group=redis mode=0755
  register: redis_register_trigger_scripts
  with_nested:
    - '{{ redis_sentinel_group_list }}'
    - ['notification', 'client_reconfig']
  notify: ['Restart Redis Sentinel']

- name: Configure Redis Sentinel service
  template: src=etc/init.d/service.j2
            dest=/etc/init.d/redis-{{ item.name }}
            owner=redis group=redis mode=0755
  with_items:
    - { name: 'sentinel', config: '{{ redis_sentinel_config }}' }
  notify: ['Restart Redis Sentinel']

- name: Start Redis Sentinel
  service: name=redis-sentinel state=started enabled=yes
