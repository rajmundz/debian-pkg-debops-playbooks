---

- name: Change ownership to 'redis' for the main Redis server config
  file: path=/etc/redis/redis.conf
        owner=redis group=redis mode=0644

- name: Detect if this is the first time the role has been ran
  stat: path={{ redis_custom_config }}
  register: redis_register_custom_config

- name: Detect if a slaveof line already exists in the main Redis config
  shell: grep '^slaveof' {{ redis_config }} || true
  changed_when: False
  register: redis_register_main_config_slaveof

- name: Remove default save lines from the main Redis config
  lineinfile:
    regexp: '^save'
    dest: '{{ redis_config }}'
    state: 'absent'
  register: redis_register_remove_saves
  when: not redis_register_custom_config.stat.exists
  notify: ['Restart Redis Server']

- name: Remove include line only if removing the save lines changed
  lineinfile:
    regexp: '^include {{ redis_custom_config }}'
    dest: '{{ redis_config }}'
    state: 'absent'
  when: redis_register_remove_saves is defined and
        redis_register_remove_saves | changed
  notify: ['Restart Redis Server']

- name: Remove other default values from the main Redis config
  lineinfile:
    regexp: '^{{ item }}'
    dest: '{{ redis_config }}'
    state: 'absent'
  when: not redis_register_custom_config.stat.exists
  with_items:
    - 'syslog-enabled'
    - 'syslog-facility'
    - 'maxclients'
    - 'maxmemory'
  notify: ['Restart Redis Server']

- name: Insert save lines to the main Redis config
  lineinfile:
    regexp: '^save {{ item }}'
    dest: '{{ redis_config }}'
    line: 'save {{ item }}'
    state: 'present'
  when: redis_save is defined and redis_save
  with_items: '{{ redis_save }}'
  notify: ['Restart Redis Server']

- name: Insert include line above the first save line to the main Redis config
  lineinfile:
    regexp: '^include {{ redis_custom_config }}'
    dest: '{{ redis_config }}'
    line: 'include {{ redis_custom_config }}'
    insertbefore: '{{ redis_save[0] | d(omit) }}'
    state: 'present'
  notify: ['Restart Redis Server']

- name: Insert templated values to the main Redis config
  lineinfile:
    regexp: '^{{ item.key }}'
    dest: '{{ redis_config }}'
    line: '{{ item.key }} {{ item.value }}'
    insertafter: '^save'
    state: 'present'
  with_items:
    - { key: 'syslog-enabled', value: '{{ redis_syslog_enabled }}' }
    - { key: 'syslog-facility', value: '{{ redis_syslog_facility | lower }}' }
    - { key: 'maxclients', value: '{{ redis_maxclients }}' }
    - { key: 'maxmemory', value: '{{ redis_maxmemory }}' }
  notify: ['Restart Redis Server']

# Communicate with the first Sentinel and get the real master server's IP address.
- name: Detect the real master from Redis Sentinel
  shell: "redis-cli {{ '-a ' + redis_requirepass if redis_requirepass else '' }} -h {{ groups[redis_sentinel_hosts_group][0] }} -p {{ redis_sentinel_port }} info | grep 'address=' | awk -F 'address=' '{print $2}' | tr ',' '\n' | grep ':' | awk -F ':' '{print $1}'"
  changed_when: False
  when: not redis_register_main_config_slaveof.stdout and
        redis_sentinel_hosts_group in group_names
  register: redis_register_real_master

- name: Insert the real slaveof to all slaves
  lineinfile:
    regexp: '^slaveof'
    dest: '{{ redis_config }}'
    line: 'slaveof {{ redis_register_real_master.stdout }} {{ redis_port }}'
    insertafter: 'EOF'
    state: 'present'
  when: not redis_register_main_config_slaveof.stdout and
        redis_sentinel_hosts_group in group_names and
        redis_hosts_group in group_names and
        inventory_hostname != redis_register_real_master.stdout and
        not redis_register_real_master.stdout in ansible_all_ipv4_addresses
  notify: ['Restart Redis Server']

- name: Configure Redis Server
  template: src=etc/redis/redis-ansible.conf.j2
            dest=/etc/redis/redis-ansible.conf
            owner=root group=root mode=0644
  notify: ['Restart Redis Server']

- name: Configure Redis Server defaults
  template: src=etc/default/redis-server.j2
            dest=/etc/default/redis-server
            owner=redis group=redis mode=0644
  notify: ['Restart Redis Server']

- name: Configure Redis Server service
  template: src=etc/init.d/service.j2
            dest=/etc/init.d/redis-{{ item.name }}
            owner=redis group=redis mode=0755
  with_items:
    - { name: 'server', config: '{{ redis_config }}' }
  notify: ['Restart Redis Server']

- name: Start Redis Server
  service: name=redis-server state=started enabled=yes
  when: not redis_hosts_group in group_names or
        (redis_hosts_group in group_names and
        (not redis_sentinel_standalone and
        redis_sentinel_hosts_group in group_names))
