#!/bin/sh

# This file is managed by Ansible, all changes will be lost

### BEGIN INIT INFO
# Provides: redis-{{ item.name }}
# Required-Start: $network $local_fs $remote_fs $rsyslog
# Required-Stop: $network $local_fs $remote_fs $rsyslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Should-Start: $local_fs $rsyslog
# Should-Stop: $local_fs $rsyslog
# Short-Description: Start and stop redis-{{ item.name }}
# Description: Redis key-value store
### END INIT INFO

DAEMON=/usr/bin/redis-{{ item.name }}
DAEMON_ARGS={{ item.config }}
NAME=redis-{{ item.name }}
DESC=redis-{{ item.name }}

RUNDIR={{ redis_run_state }}
PIDFILE={{ redis_run_state }}/redis-{{ item.name }}.pid

test -x $DAEMON || exit 0

if [ -r /etc/default/$NAME ]
then
  . /etc/default/$NAME
fi

. /lib/lsb/init-functions

set -e

case "$1" in
  start)
  echo -n "Starting $DESC: "
  mkdir -p $RUNDIR
  touch $PIDFILE
  chown redis:redis $RUNDIR $PIDFILE
  chmod 755 $RUNDIR

  if [ -n "$ULIMIT" ]
  then
    ulimit -n $ULIMIT
  fi

  if start-stop-daemon --start --quiet --umask 007 --pidfile $PIDFILE --chuid redis:redis --exec $DAEMON -- $DAEMON_ARGS
  then
    echo "$NAME."
  else
    echo "failed"
  fi
  ;;
  stop)
  echo -n "Stopping $DESC: "
  if start-stop-daemon --stop --retry forever/TERM/1 --quiet --oknodo --pidfile $PIDFILE --exec $DAEMON
  then
    echo "$NAME."
  else
    echo "failed"
  fi
  rm -f $PIDFILE
  sleep 1
  ;;

  restart|force-reload)
  ${0} stop
  ${0} start
  ;;

  status)
  echo -n "$DESC is "
  if start-stop-daemon --stop --quiet --signal 0 --name ${NAME} --pidfile ${PIDFILE}
  then
    echo "running"
  else
    echo "not running"
    exit 1
  fi
  ;;

  *)
  echo "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload|status}" >&2
  exit 1
  ;;
esac

exit 0
