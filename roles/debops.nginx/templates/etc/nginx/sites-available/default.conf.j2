{#
#
#    ==== Default server template for debops.nginx role ====
#
# List of parameters supported by this template:
#
#   - item.enabled: True/False
#       Required. Determines if symlink to server configuration is present in
#       /etc/nginx/sites-enabled/ directory.
#
#
#   - item.name: []
#       Required. List of domain names compatible with 'server_name' nginx
#       configuration option.
#
#       First element is used to create the name of the nginx configuration
#       file and must be a normal domain name, other elements can include
#       wildcards and regexp matches.
#
#       List can also be empty (but needs to be defined) in which case the
#       configuration its included in will be named 'default'.
#
#
#   - item.filename: ''
#       Optional. Alternative name of the nginx configuration file in
#       '/etc/nginx/' directory. The suffix '.conf' will be added automatically.
#       Can be used to distinguish between different versions of the same
#       configuration - for example separate configuration for HTTP and HTTPS.
#
#
#   - item.welcome: True/False
#       Create an example 'index.html' file in website root directory using
#       a template. If index.html is present, it won't be overwritten.
#
#
#   - item.welcome_template: ''
#       Optional. Specify absolute path to a Jinja2 template which should be
#       used to generate a welcome page.
#
#
#   - item.welcome_domain: ''
#       Optional. Specify a DNS domain which should be used in the generated
#       welcome page. By default, a domain is detected from 'item.name[0]', or
#       if it's not specified, 'ansible_domain' variables.
#
#
#   - item.welcome_css: True/False
#       Optional. If specified and False, omit custom stylesheet in the
#       generated 'index.html' file.
#
#
#   - item.by_role: ''
#       Optional. Add a comment indicating which role has created this specific
#       server configuration. Specify just the name of the role, ie. "debops.nginx".
#
#
#   - item.delete: True
#       Optional. Mark this server configuration to be removed on the next
#       Ansible run (symlink to that configuration will also be removed).
#
#
#   - item.userdir: True/False
#       Optional. Enable UserDir support on domains configured in this server.
#       Web pages on https://host/~<user>/ will be read from
#       /srv/www/<user>/userdir/public directories.
#
#
#   - item.userdir_regexp: ''
#       Optional. Specify location regexp pattern used by nginx to determine if
#       a specified URL is an userdir URL.
#
#
#   - item.userdir_alias: ''
#       Optional. Specify the absolute path to user directories used as an
#       alias pattern which uses the parameters from location regexp to select
#       the correct user and file to display.
#
#
#   - item.userdir_index: ''
#       Optional. Specify list of index files which will be used by nginx
#       automatically to display a HTML page, if found in current directory.
#
#
#   - item.userdir_options: |
#       Optional. Specify additional options added to the userdir location
#       block as a YAML text block.
#
#
#   - item.type: ''
#       Optional. Specify name of the template to use to generate nginx server
#       configuration. Templates can extend other templates.
#
#
#   - item.redirect: ''
#       Optional. Redirect incoming requests on HTTP port to different address.
#
#
#   - item.redirect_ssl: ''
#       Optional. Redirect incoming requests on HTTPS port to different address.
#
#
#   - item.redirect_code: ''
#       Optional. Specify HTTP code used in the redirect response, by default
#       307 Temporary Redirect.
#
#
#   - item.redirect_code_ssl: ''
#       Optional. Specify HTTP code used in the redirect response from HTTP to
#       HTTPS, by default 301 Moved Permanently.
#
#
#   - item.redirect_from: True or []
#       Optional. Create a separate server { } section which will automatically
#       redirect requests from specified list of server names (or all but the
#       first name in item.name list if option is set to True) to the first
#       server name specified in item.name list.
#
#
#   - item.redirect_to: ''
#       Optional. Create separate server { } section which redirects all
#       requests on servers specified in 'item.name' list to server specified
#       in 'item.redirect_to'. Specified server name will be used as the only
#       name in subsequent HTTP and HTTPS configuration.
#
#
#   - item.redirect_to_ssl: True/False
#       Optional. If True, redirect connection from HTTP to HTTPS version of
#       the site. Site is expected to be configured in a separate configuration
#       file. Set to False to allow to serve the website via HTTP and HTTPS and
#       donâ€™t redirect HTTP to HTTPS.
#
#
#   - item.acme: True/False
#       Optional. Enable or disable support for Automated Certificate
#       Management Environment challenge queries for this server.
#
#
#   - item.ssl: True/False
#       Optional. Enable or disable HTTPS for this server configuration (HTTPS
#       is enabled by default for all servers when using debops.pki. You can
#       disable it selectively using this option).
#
#
#   - item.ssl_crt: ''
#       Optional. Absolute path to custom SSL certificate to use, If not
#       supplied pki_cert will be used instead.
#
#
#   - item.ssl_key: ''
#       Optional. Absolute path to custom SSL private key to use. If not
#       supplied pki_key will be used instead.
#
#
#   - item.ssl_ca: ''
#       Optional. Specify absolute path to the client CA certificate used to
#       authenticate clients. If not specified, pki_ca will be used instead.
#
#
#   - item.ssl_trusted: ''
#       Optional. Specify absolute path to the intermediate+root CA server
#       certificate which will be used for OCSP stapling verification. If not
#       specified, value of pki_trusted will be used instead.
#
#
#   - item.ssl_dhparam: ''
#       Optional. Absolute path to custom DHE parameters to use. If not
#       supplied, nginx_ssl_dhparam will be used instead.
#
#
#   - item.ssl_ciphers: ''
#       Optional. Name of the list of preferred server ciphers to use. Server
#       ciphers with corresponding names can be found in 'vars/main.yml' file
#       in 'debops.nginx' role. 'pfs' ciphers are enabled by default.
#
#
#   - item.ssl_curve: ''
#       Optional. ECC curve enabled for this server. By default, 'secp384r1'.
#
#
#   - item.pki_realm: ''
#       Optional. Overwrite default PKI realm used by nginx for this server
#       configuration. See 'debops.pki' role for more information, as well as
#       '/etc/pki/' directory for list of available realms.
#
#
#   - item.pki_crt: ''
#       Optional. Path to custom SSL certificate to use, relative to currently
#       enabled PKI realm (either system-wide or for current server).
#
#
#   - item.pki_key: ''
#       Optional. Path to custom SSL private key to use, relative to currently
#       enabled PKI realm (either system-wide or for current server).
#
#
#   - item.pki_ca: ''
#       Optional. Path to custom client CA certificate to use for client
#       authentication, relative to currently enabled PKI realm.
#
#
#   - item.pki_trusted: ''
#       Optional. Path to custom intermediate+root CA certificate to use for
#       OCSP stapling verification, relative to currently enabled PKI realm.
#
#
#   - item.ocsp: True/False
#       Optional. Enable or disable OCSP stapling for a given server.
#
#
#   - item.ocsp_verify: True/False
#       Optional. Enable or disable OCSP stapling verification for a given
#       server. An intermediate+root CA certificate is required.
#
#
#   - item.owner: ''
#       Optional. If specified, nginx will configure server root to
#       '/srv/www/<owner>/sites/<item.name[0]>/public/', if not specified,
#       nginx will configure server root to
#       '/srv/www/sites/<item.name[0]/public/'.
#
#
#   - item.keepalive: ''
#       Optional. Set custom KeepAlive timeout for this server, in seconds.
#
#
#   - item.deny_hidden: True/False
#       Optional. Allow or deny access to all hidden files (enabled by
#       default).
#
#
#   - item.favicon: True/False
#       Optional. Enable or disable code that ignores '/favicon.ico' requests
#       in server logs to reduce noise (enabled by default).
#
#
#   - item.listen: []/False
#       Optional. List of ports, IP addresses or sockets this server
#       configuration should listen on for HTTP connections. By default set to
#       '[::]:80' for all servers.
#
#
#   - item.listen_ssl: []/False
#       Optional. List of ports, IP addresses or socnets this server
#       configuration should listen on for HTTPS connections. By default set to
#       '[::]:443' for all servers.
#
#
#   - item.index: ''
#       Optional. String with custom index filenames. If set to False, the
#       nginx role won't add the directive.
#
#
#   - item.root: ''
#       Optional. Absolute path to server root to use for this server
#       configuration. If not specified, nginx role will use
#       '/srv/www/<item.name[0]>/public/' by default; see also 'item.owner'
#       parameter.  If set to False, the nginx role won't add the directive.
#
#
#   - item.access_log: ''
#       Optional. Name of the access log file in the '/var/log/nginx/' directory.
#       The suffix '.log' will be added automatically. If not specified, nginx
#       role will use '<item.name[0]>_access' by default.
#
#
#   - item.error_log: ''
#       Optional. Name of the error log file in the '/var/log/nginx/' directory.
#       The suffix '.log' will be added automatically. If not specified, nginx
#       role will use '<item.name[0]>_error' by default.
#
#
#   - item.status: []
#       Optional. Enable nginx server status page and allow access from list of
#       IP addresses or CIDR ranges.
#
#
#   - item.status_name: ''
#       Optional. Set the name of the location which should be used for nginx
#       status page
#
#
#   - item.access_policy: ''
#       Optional. Specify a named "access policy" to use for this server. See
#       debops.nginx role defaults, 'nginx_access_policy_*' variables for more
#       information.
#
#
#   - item.satisfy: 'any/all'
#       Optional. Set the server behaviour to either accept any of 'allow,
#       auth' configuration restrictions, or require all of them to match.
#       By default, any restriction by itself will match.
#
#
#   - item.allow: []
#       Optional. List of IP addresses or CIDR networks which can access given
#       server. Automatically adds 'deny: all' at the end of the list.
#
#
#   - item.auth_basic: True/False
#       Optional. Enable HTTP Basic Authentication for this server. Instead of
#       True/False, you can use a list of accounts which will automatically
#       cast to True, if not empty. Example:
#
#           item.auth_basic: '{{ account_list }}'
#
#
#   - item.auth_basic_realm: ''
#       Optional. String which will be displayed to the user in the
#       HTTP Basic Auth dialog box.
#
#
#   - item.auth_basic_name: ''
#       Optional. Required with 'item.auth_basic'. Specifies the name of the
#       htpasswd file used for this server authentication. htpasswd files are
#       stored in '/etc/nginx/private/' directory.
#
#       You can use 'item.auth_basic_filename' and specify full path to
#       htpasswd file to use; file needs to be readable by nginx system user
#       (by default, 'www-data').
#
#
#   - item.options: |
#       Optional. Add custom options to this server configuration using text
#       block (semicolons at the end of each line are required).
#
#
#   - item.error_pages: {}
#       Optional. Dict of error codes in string format as keys and
#       corresponding error pages to display. Example:
#
#         error_pages:
#           '403 404': '/400.html'
#           '502':     '/500.html'
#
#
#   - item.error_pages_list: []
#       Optional. List of dictionaries, each one describing an error page. List
#       of known keys and their descriptions:
#
#       code: '' or []
#         Required. String or list of error codes to include in this
#         configuration section.
#
#       uri: ''
#         Required. URI or location to redirect the request to.
#
#       location and location_options: ''
#         Optional. if specified, an additional location section will be added
#         with contents of 'location_options' parameter. If only
#         'location_options' is present, the 'uri' parameter will be used as
#         the location.
#
#       Examples:
#
#         error_pages_list:
#           - code: [ '403', '404', '=500' ]
#             uri: '/error.html'
#             location: '= /error.html'
#             location_options: |
#               internal;
#
#
#   - item.location: {}
#       Optional. Dict of location sections to include in this server
#       configuration, in text block format (semicolons at end of each
#       configuration line required). Each key defines string accepted by
#       "location" option, values are strings or text blocks to be included
#       inside each location section. Examples:
#
#         location:
#           '/': 'try_files $uri $uri/ /index.html =404;'
#
#           '~ ^/doc$': |
#             alias /usr/share/doc;
#             autoindex on;
#
#
#   - item.location_allow: {}
#       Optional. Dict which adds "allow" entries to each location section
#       defined above from a list. Each location needs to have corresponding
#       entry in "item.location" dict. If "item.location_deny" is not defined,
#       'deny all;' is added at the end. Examples:
#
#         location_allow:
#           '~ ^/doc$': [ '127.0.0.1', '::1' ]
#
#
#   - item.location_deny: {}
#       Optional. Dict which adds "deny" entries to each location section
#       defined above from a list. Each location needs to have corresponding
#       entry in "item.location" dict. Examples:
#
#         location_deny:
#           '/': [ '192.168.0.1/24' ]
#           '~ ^/doc$': [ 'all' ]
#
#
#   - item.location_referers: {}
#       Optional. Dict with lists of valid referers accepted for a given
#       location, all other referers will be blocked by nginx. Each location
#       needs to have corresponding entry in "item.location" dict. Examples:
#
#         location_referers:
#           '/': [ '{{ ansible_fqdn }}', 'www.{{ ansible_fqdn }}', '*.{{ ansible_domain }}' ]
#
#
#   - item.location_list: []
#       Optional. This is an alternative syntax of item.location_* entries;
#       instead of using text blocks directly, it uses dict keys and values to
#       configure each location, which allows for greater control and nesting.
#       List of known keys and their descriptions:
#
#       pattern: ''
#         location pattern, for example: '/' or '~ ^/doc$' or 'gitlab'
#
#       pattern_prefix: ''
#         string prepended to the location pattern, for example: '@' which will
#         create named location '@gitlab'
#
#       enabled: True/False
#         boolean value specyfing if location should be included in config,
#         defaults to True
#
#       referers: []
#         list of allowed valid referers, for example [ '{{ ansible_fqdn }}' ]
#
#       allow / deny: []
#         lists of hosts or CIDR ranges to allow or deny, lack of deny implies
#         'deny all;' at the end of the allow list
#
#       options: '' or |
#         string or text block with options for this location block, semicolons
#         at the end of each line are required
#
#       locations: []
#         nested list of locations to create in this location section
#
#   - item.hsts_enabled: True
#       Optional. If this is set to True and SSL is enabled for this item, the
#       Strict-Transport-Security header is set in the server's responses. If
#       this is set to false, the Strict-Transport-Security header will not
#       be set in the server's responses.
#
#
#   - item.hsts_preload: True/False
#       Optional. Add a "preload" parameter to the HSTS header which can be
#       used with https://hstspreload.appspot.com/ site to configure HSTS
#       preloading for a given website.
#
#
#   - item.try_files: nginx_default_try_files
#       Optional. Checks for the existence of files in order, and returns the
#       first file that is found for location /.
#       http://wiki.nginx.org/NginxHttpCoreModule#try_files
#}
{#

    ---- HTTPS, ports to listen on, default server, HTTPS redirect ----
#}
{% set nginx_tpl_acme           = (item.acme      | default(nginx_acme)) | bool %}
{% set nginx_tpl_ssl            = (item.ssl       | default(nginx_pki)) | bool %}
{% set nginx_tpl_listen         = item.listen     | default(nginx_listen_port if nginx_listen_port else nginx_listen_socket) %}
{% if nginx_tpl_ssl | bool %}
{% set nginx_tpl_listen_ssl     = item.listen_ssl | default(nginx_listen_ssl_port if nginx_listen_ssl_port else nginx_listen_ssl_socket) %}
{% endif %}
{% set nginx_tpl_default_server = []                                           %}
{% set nginx_tpl_ipv6only = []                                                 %}
{% if nginx_register_default_server|d() %}
{% if (nginx_register_default_server in item.name or
       not item.name and nginx_register_default_server == "default")           %}
{%   set _ = nginx_tpl_default_server.append('default_server')                 %}
{%   if (nginx_manage_ipv6only | bool)                                         %}
{%     set _ = nginx_tpl_ipv6only.append('ipv6only=off')                       %}
{%  endif                                                                      %}
{% endif                                                                       %}
{% endif %}
{% set nginx_tpl_default_server_ssl = []                                       %}
{% set nginx_tpl_ipv6only_ssl = []                                             %}
{% if nginx_register_default_server_ssl|d() %}
{% if (nginx_register_default_server_ssl in item.name or
       not item.name and nginx_register_default_server_ssl == "default")       %}
{%   set _ = nginx_tpl_default_server_ssl.append('default_server')             %}
{%   if (nginx_manage_ipv6only | bool)                                         %}
{%     set _ = nginx_tpl_ipv6only_ssl.append('ipv6only=off')                   %}
{%  endif                                                                      %}
{% endif                                                                       %}
{% endif %}
{% set nginx_tpl_default_redirect_code = '307'                                 %}
{% set nginx_tpl_default_redirect_code_ssl = '301'                             %}
{% set nginx_tpl_http_redirect = item.redirect | default('https://$host$request_uri') %}
{% set nginx_tpl_pki_custom_realm = '' %}
{% set nginx_tpl_pki_custom_realm_list = [] %}
{% if (nginx_pki | bool and item.name | d() and (ansible_local|d() and ansible_local.pki|d() and ansible_local.pki.known_realms|d())) %}
{%   for name in item.name %}
{%     if name in ansible_local.pki.known_realms %}
{%       set _ = nginx_tpl_pki_custom_realm_list.append(name) %}
{%     endif %}
{%   endfor %}
{% endif %}
{% if nginx_tpl_pki_custom_realm_list %}
{%   set nginx_tpl_pki_custom_realm = nginx_tpl_pki_custom_realm_list[0] %}
{% endif %}
{#

    ---- SSL certificate ----
#}
{% set nginx_tpl_ssl_certificate = nginx_pki_path + "/" + item.pki_realm | d(nginx_tpl_pki_custom_realm if nginx_tpl_pki_custom_realm else nginx_pki_realm) + "/" + item.pki_crt | d(nginx_pki_crt) %}
{% if (item.ssl_crt is defined and item.ssl_crt)  %}
{%   set nginx_tpl_ssl_certificate = item.ssl_crt %}
{% endif                                          %}
{#

    ---- SSL certificate key ----
#}
{% set nginx_tpl_ssl_certificate_key = nginx_pki_path + "/" + item.pki_realm | d(nginx_tpl_pki_custom_realm if nginx_tpl_pki_custom_realm else nginx_pki_realm) + "/" + item.pki_key | d(nginx_pki_key) %}
{% if (item.ssl_key is defined and item.ssl_key)      %}
{%   set nginx_tpl_ssl_certificate_key = item.ssl_key %}
{% endif                                              %}
{#

    ---- SSL client CA certificate ----
#}
{% set nginx_tpl_ssl_client_certificate = nginx_pki_path + "/" + item.pki_ca_realm | d(nginx_tpl_pki_custom_realm if nginx_tpl_pki_custom_realm else nginx_pki_ca_realm) + "/" + item.pki_ca | d(nginx_pki_ca) %}
{% if (item.ssl_ca is defined and item.ssl_ca)      %}
{%   set nginx_tpl_ssl_client_certificate = item.ssl_ca %}
{% endif                                              %}
{#

    ---- SSL trusted CA certificate ----
#}
{% set nginx_tpl_ssl_trusted_certificate = nginx_pki_path + "/" + item.pki_realm | d(nginx_tpl_pki_custom_realm if nginx_tpl_pki_custom_realm else nginx_pki_realm) + "/" + item.pki_trusted | d(nginx_pki_trusted) %}
{% if (item.ssl_trusted is defined and item.ssl_trusted)      %}
{%   set nginx_tpl_ssl_trusted_certificate = item.ssl_trusted %}
{% endif                                              %}
{#

    ---- Diffie-Hellman Key Exchange parameters ----
#}
{% set nginx_tpl_ssl_dhparam = item.ssl_dhparam | default(nginx_ssl_dhparam) %}
{#

    ---- root directory ----
#}
{% if (item.owner is defined and item.owner)                               %}
{%     set nginx_tpl_root = item.root | default(nginx_www + '/' + item.owner + '/sites/' + item.name[0] | d('default') + '/public') %}
{% else                                                                    %}
{%     set nginx_tpl_root = item.root | default(nginx_www + '/sites/' + item.name[0] | d('default') + '/public') %}
{% endif                                                                   %}
{% if (item.root_suffix is defined and item.root_suffix)                       %}
{%     set nginx_tpl_root = nginx_tpl_root + '/' + item.root_suffix            %}
{% endif                                                                       %}
{% macro print_root() %}
{% block nginx_tpl_block_root %}
{% if ((item.root is undefined or not item.root | bool) and nginx_tpl_root) %}
        root {{ nginx_tpl_root }};
{% endif %}
{% endblock %}
{% endmacro %}
{#

    ---- macro which prints location entries from 'location' hash, flat ----
#}
{% macro print_location(location,location_allow=[],location_referers=[],location_deny=[]) %}
{%     if location is defined                                                  %}
{%         for path in location.keys()                                         %}
{%             if location[path]                                               %}
        location {{ path }} {
{%                 if location_referers is defined                             %}
{%                     if location_referers[path] is defined and location_referers[path] %}
                valid_referers none blocked {{ location_referers[path] | unique | join(' ') }};
                if ($invalid_referer) {
                        return 403;
                }
{%                     endif                                                   %}
{%                 endif                                                       %}
                {{ item.location[path] | indent(16) }}
{%                 if location_allow is defined                                %}
{%                     if location_allow[path] is defined and location_allow[path] %}
{%                         for address in location_allow[path] | unique        %}
                allow {{ address }};
{%                         endfor                                              %}
{%                         if location_deny is defined                         %}
{%                             if location_deny[path] is defined               %}
{%                                 for address in location_deny[path] | unique %}
                deny {{ address }};
{%                                 endfor                                      %}
{%                             endif                                           %}
{%                         else                                                %}
                deny all;
{%                         endif                                               %}
{%                     endif                                                   %}
{%                 endif                                                       %}
        }

{%             endif                                                           %}
{%         endfor                                                              %}
{%     endif                                                                   %}
{% endmacro                                                                    %}
{#

    ---- macro which prints location entries from 'location_list' list, recursive
#}
{% macro print_location_list(location_list)                                    %}
{%     if location_list is defined                                             %}
{%         for entry in location_list                                          %}
{%             if (entry.pattern is defined and entry.pattern and
                   (entry.enabled is not defined or entry.enabled | bool))     %}
        location {{ entry.pattern_prefix | default('') + entry.pattern }} {
{%                 if entry.referers is defined and entry.referers             %}
                valid_referers none blocked {{ entry.referers | unique | join(' ') }};
                if ($invalid_referer) {
                        return 403;
                }
{%                 endif                                                       %}
{%                 if entry.options is defined and entry.options               %}
                {{ entry.options | indent(16) }}
{%                 endif                                                       %}
{%                 if entry.allow is defined and entry.allow                   %}
{%                     for address in entry.allow | unique                     %}
                allow {{ address }};
{%                     endfor                                                  %}
{%                     if entry.deny is defined and entry.deny                 %}
{%                         for address in entry.deny | unique                  %}
                deny {{ address }};
{%                         endfor                                              %}
{%                     else                                                    %}
                deny all;
{%                     endif                                                   %}
{%                 endif                                                       %}
{%                 if entry.locations is defined and entry.locations           %}
{{ print_location_list(entry.locations) | indent(8, true) }}
{%                 endif                                                       %}
        }
{%             endif                                                           %}
{% if not loop.last %}

{% endif %}
{%         endfor                                                              %}
{%     endif                                                                   %}
{% endmacro                                                                    %}
{#

    ---- macro which prints the nginx server block which is shared between HTTP and HTTPS
#}
{% macro print_shared_nginx_server_block() %}
{% if (not nginx_tpl_ssl and ((item.redirect is defined and item.redirect) or (item.redirect_to_ssl is defined and item.redirect_to_ssl))) %}
        return {{ item.redirect_code_ssl | default(nginx_tpl_default_redirect_code_ssl) }} {{ nginx_tpl_http_redirect }};
{% elif (nginx_tpl_ssl and (item.redirect_ssl is defined and item.redirect_ssl)) %}
        return {{ item.redirect_code | default(nginx_tpl_default_redirect_code) }} {{ item.redirect_ssl }};
{% else %}
        keepalive_timeout {{ item.keepalive | default(nginx_default_keepalive_timeout) }};

{% block nginx_tpl_block_log %}
{% if item.name is defined and item.name %}
        access_log {{ nginx_log_path + '/' + item.access_log | default(item.filename | default(item.name[0]) + '_access') }}.log;
        error_log {{ nginx_log_path + '/' + item.error_log | default(item.filename | default(item.name[0]) + '_error') }}.log;

{% endif %}
{% endblock %}
{% block nginx_tpl_block_index %}
{% if item.index is undefined or item.index != False %}
        index {{ item.index | default('index.html index.htm') }};

{% endif %}
{% endblock %}
{% if nginx_real_ip_from|d() and nginx_real_ip_from %}
{% if nginx_real_ip_header|d() and nginx_real_ip_header %}
        real_ip_header {{ nginx_real_ip_header }};
{% endif %}
{% if nginx_real_ip_recursive | bool %}
        real_ip_recursive on;
{% elif not nginx_real_ip_recursive | bool %}
        real_ip_recursive off;
{% endif %}
{% if nginx_real_ip_from is string %}
        set_real_ip_from {{ nginx_real_ip_from }};

{% else %}
{% for element in nginx_real_ip_from %}
        set_real_ip_from {{ element }};
{% endfor %}
{% endif %}

{% endif %}
{% if item.error_pages is defined and item.error_pages %}
{% for code, location in item.error_pages.iteritems() %}
        error_page {{ code }} {{ location }};
        location {{ location }} {
                internal;
        }

{% endfor %}
{% endif %}
{% if item.error_pages_list|d() %}
{% for element in item.error_pages_list %}
{% if element.location|d() or element.location_options|d() %}

{% endif %}
        error_page {{ element.code if (element.code is string) else (element.code | join(" ")) }} {{ element.uri }};
{% if element.location|d() or element.location_options|d() %}
        location {{ element.location | d(element.uri) }} {
{{ element.location_options | indent(16, true) }}
        }
{% if not loop.last %}

{% endif %}
{% endif %}
{% endfor %}

{% endif %}
{% if item.options is defined and item.options %}
        {{ item.options | indent(8) }}

{% endif %}
{% if ((item.access_policy is defined and item.access_policy) and
       item.access_policy in nginx_access_policy_satisfy_map.keys()) %}
        satisfy {{ nginx_access_policy_satisfy_map[item.access_policy] }};

{% elif ((item.allow is defined and item.allow) or
         (item.auth_basic is defined and item.auth_basic) or
         (item.satisfy is defined and item.satisfy) or
         ((item.access_policy is defined and item.access_policy) and
          item.access_policy not in nginx_access_policy_satisfy_map.keys())) %}
        satisfy {{ item.satisfy | default(nginx_default_satisfy) }};

{% endif %}
{% if ((item.allow is defined and item.allow) or
       (item.access_policy is defined and item.access_policy)) %}
{% if item.allow is defined %}
{% if item.allow is string %}
        allow {{ item.allow }};
{% else %}
{% for address in item.allow | unique %}
	allow {{ address }};
{% endfor %}
{% endif %}
{% endif %}
{% if ((item.access_policy is defined and item.access_policy) and
       (item.access_policy in nginx_access_policy_allow_map.keys())) %}
{% for address in nginx_access_policy_allow_map[item.access_policy] | unique %}
	allow {{ address }};
{% endfor %}
{% endif %}
	deny all;

{% endif %}
{% if ((item.access_policy is defined and item.access_policy) and
       (item.access_policy in nginx_access_policy_auth_basic_map.keys())) %}
        auth_basic "{% if item.auth_basic_realm is defined and item.auth_basic_realm %}{{ item.auth_basic_realm }}{% else %}{{ nginx_default_auth_basic_realm }}{% endif %}";
        auth_basic_user_file {{ nginx_private_path + "/" + nginx_access_policy_auth_basic_map[item.access_policy] }};

{% elif item.auth_basic is defined and item.auth_basic %}
        auth_basic "{% if item.auth_basic_realm is defined and item.auth_basic_realm %}{{ item.auth_basic_realm }}{% else %}{{ nginx_default_auth_basic_realm }}{% endif %}";
        auth_basic_user_file {{ item.auth_basic_filename | default(nginx_private_path + "/" + item.auth_basic_name) }};

{% endif %}
{% if item.userdir is defined and item.userdir %}
	location ~ {{ item.userdir_regexp | d('^/~(.+?)(/.*)?$') }} {
		alias {{ item.userdir_alias | d(nginx_www + '/$1/userdir/public$2') }};
		index {{ item.userdir_index | d(item.index | default('index.html index.htm')) }};
{% if item.userdir_options|d() %}
{{ item.userdir_options | indent(16, true) }}
{% else %}
		autoindex on;
		autoindex_exact_size off;
{% endif %}
	}

{% endif %}
{% if (item.deny_hidden is undefined or item.deny_hidden|d()) %}
	# Disallow access to hidden files and directories
	location ~ /\. {
		return 404;
	}

{% endif %}
{% if (item.favicon is defined and item.favicon) or item.favicon is undefined %}
	location = /favicon.ico {
		try_files /favicon.ico =204;
		access_log off;
		log_not_found off;
	}

{% endif %}
{% if item.status|d(True) and (nginx_status or nginx_status_localhost) %}
	location = {{ item.status_name | default(nginx_status_name) }} {
		stub_status on;
		access_log off;
{% if nginx_status_localhost %}
{% for address in nginx_status_localhost | unique %}
		allow {{ address }};
{% endfor %}
{% endif %}
{% if nginx_status %}
{% for address in nginx_status | unique %}
		allow {{ address }};
{% endfor %}
{% endif %}
{% if item.status is defined and item.status %}
{% for address in item.status | unique %}
		allow {{ address }};
{% endfor %}
{% endif %}
		deny all;
	}

{% endif %}
{% if nginx_tpl_default_server or nginx_tpl_default_server_ssl %}
        include /etc/nginx/site-default.d/*.conf;

{% endif %}
{% block nginx_tpl_block_location %}
{% if (item.location is defined and item.location) or (item.location_list is defined and item.location_list) %}
{% if item.location_list is defined and item.location_list %}
{{ print_location_list(item.location_list) }}
{% endif %}
{% if item.location is defined and item.location %}
{{ print_location(item.location, item.location_allow, item.location_referers, item.location_deny) }}{% endif %}{% else %}
        location / {
{% block nginx_tpl_block_location_root %}
                try_files {{ item.try_files|default(nginx_default_try_files) | join(' ') }} =404;
{% endblock %}
        }
{% endif %}
{% endblock %}
{% block nginx_tpl_block_custom_locations %}
{% endblock %}
{% endif %}
{% endmacro %}
{#

    ---- nginx server template begins here ----
#}
# {{ ansible_managed }}

{% if item.name is defined and item.name %}
# nginx server configuration for:
{% for address in item.name %}
{% if nginx_tpl_ssl and not (item.redirect_to_ssl|d(True) | bool) %}
#    - http://{{ address }}/
{% endif %}
#    - {{ "https" if nginx_tpl_ssl else "http" }}://{{ address }}/
{% endfor %}
{% if item.by_role|d() %}
# generated by Ansible role: {{ item.by_role }}
{% endif %}

{% else %}
# nginx server default configuration
{% if item.by_role|d() %}
# generated by Ansible role: {{ item.by_role }}
{% endif %}

{% endif %}
{% if ((item.redirect_from is defined and item.redirect_from) and
       (item.name is defined and item.name)) %}
server {

{% if (item.listen is undefined or (item.listen is defined and item.listen)) %}
{% for port in nginx_tpl_listen %}
        listen {{ port }};
{% endfor %}

{% if item.redirect_from is iterable %}
{% for name in item.redirect_from %}
        server_name {{ name }};
{% endfor %}
{% else %}{# item.redirect_from is True #}
{% for name in item.name[1:] %}
        server_name {{ name }};
{% endfor %}
{% endif %}

{% endif %}
        return {{ item.redirect_code | default(nginx_tpl_default_redirect_code) }} $scheme://{{ item.name[0] }}$request_uri;

}

{% elif ((item.redirect_to is defined and item.redirect_to) and
         (item.name is defined and item.name)) %}
server {

{% if (item.listen is undefined or (item.listen is defined and item.listen)) %}
{% for port in nginx_tpl_listen %}
        listen {{ port }};
{% endfor %}

{% for address in item.name %}
{% if address != item.redirect_to %}
        server_name {{ address }};
{% endif %}
{% endfor %}

{% endif %}
        return {{ item.redirect_code | default(nginx_tpl_default_redirect_code) }} $scheme://{{ item.redirect_to }}$request_uri;

}

{% endif %}
server {

{% if (item.listen is undefined or (item.listen is defined and item.listen)) %}
{% for port in nginx_tpl_listen %}
        listen {{ port }}{% if nginx_tpl_default_server %} {{ nginx_tpl_default_server | join(" ") }}{% endif %}{% if (loop.first and nginx_tpl_ipv6only) %} {{ nginx_tpl_ipv6only | join(" ") }}{% endif %};
{% endfor %}

{% if item.name is defined and item.name %}
{% if item.redirect_from is defined and item.redirect_from %}
        server_name {{ item.name[0] }};

{% elif item.redirect_to is defined and item.redirect_to %}
        server_name {{ item.redirect_to }};

{% else %}
{% for name in item.name %}
        server_name {{ name }};
{% endfor %}

{% endif %}
{% endif %}
{{ print_root() }}
{% if nginx_tpl_acme | bool %}
        include snippets/acme-challenge.conf;

{% endif %}
{% endif %}
{% if nginx_tpl_ssl %}
{% if (item.listen is undefined or (item.listen is defined and item.listen)) %}
{% if not (item.redirect_to_ssl|d(True) | bool) %}
{{ print_shared_nginx_server_block() }}
{% else %}
        location / {
                return {{ item.redirect_code_ssl | default(nginx_tpl_default_redirect_code_ssl) }} {{ nginx_tpl_http_redirect }};
        }
{% endif %}

}

server {

{% endif %}
{% for port in nginx_tpl_listen_ssl %}
        listen {{ port }} ssl{% if nginx_version | version_compare('1.9.5','>=') %} http2{% elif nginx_version | version_compare('1.4','>=') %} spdy{% endif %}{% if nginx_tpl_default_server_ssl %} {{ nginx_tpl_default_server_ssl | join(" ") }}{% endif %}{% if (loop.first and nginx_tpl_ipv6only_ssl) %} {{ nginx_tpl_ipv6only_ssl | join(" ") }}{% endif %};
{% endfor %}

        ssl_certificate           {{ nginx_tpl_ssl_certificate }};
        ssl_certificate_key       {{ nginx_tpl_ssl_certificate_key }};
        ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers               "{{ nginx_ssl_ciphers[item.ssl_ciphers | default(nginx_default_ssl_ciphers)] }}"; # SSL cipher list: {{ item.ssl_ciphers | default(nginx_default_ssl_ciphers) }}
{% if nginx_tpl_ssl_dhparam %}
        ssl_dhparam               {{ nginx_tpl_ssl_dhparam }};
{% endif %}
        ssl_ecdh_curve            {{ item.ssl_curve | default(nginx_default_ssl_curve) }};
{% if nginx_version | version_compare('1.4','>=') and (item.ocsp | d(nginx_ocsp)) | bool %}
        ssl_stapling              on;
{% if (item.ocsp_verify | d(nginx_ocsp_verify)) | bool %}
        ssl_stapling_verify       on;
        ssl_trusted_certificate   {{ nginx_tpl_ssl_trusted_certificate }};
{% endif %}
        resolver                  {{ (item.ocsp_resolvers | d(nginx_ocsp_resolvers)) | ipwrap | join(" ") }} valid=300s;
        resolver_timeout          5s;
{% endif %}
{% if item.hsts_enabled is undefined or (item.hsts_enabled is defined and item.hsts_enabled) %}
        add_header                Strict-Transport-Security "max-age={{ nginx_hsts_age | default('15768000') }}{% if nginx_hsts_subdomains|bool %}; includeSubDomains{% endif %}{% if (item.hsts_preload | d(nginx_hsts_preload)) | bool %}; preload{% endif %}";
{% endif %}

{% if item.name is defined and item.name %}
{% if item.redirect_from is defined and item.redirect_from %}
        server_name {{ item.name[0] }};

{% elif item.redirect_to is defined and item.redirect_to %}
        server_name {{ item.redirect_to }};

{% else %}
{% for name in item.name %}
        server_name {{ name }};
{% endfor %}

{% endif %}
{% endif %}
{% endif %}
{% if nginx_tpl_ssl | bool %}
{{ print_root() }}
{% if nginx_tpl_acme | bool %}
        include snippets/acme-challenge.conf;

{% endif %}
{% endif %}
{# ---- end of nginx_tpl_ssl ---- #}
{{ print_shared_nginx_server_block() }}
}

