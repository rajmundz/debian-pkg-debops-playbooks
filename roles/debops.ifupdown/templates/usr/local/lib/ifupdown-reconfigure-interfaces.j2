#!/bin/bash

# {{ ansible_managed }}

# Reconfigure changed network interfaces
# Part of the debops.ifupdown Ansible role
# See https://github.com/debops/ansible-ifupdown/ for more details

# Script filename to use in log messages
script="$(basename $0)"

# If this file is present, interfaces are configured for the first time
interface_init_file="{{ ifupdown_reconfigure_init_file }}"

# Get the name of the temporary file which holds the list of modified interfaces
interface_file="${1}"

# Path and name of the script which will allow to bring the interface up later
ifup_delayed="/tmp/ifupdown-delayed"

# Name of the file that indicates that interfaces should not be stopped/started
# automatically
ifupdown_manual="{{ ifupdown_reconfigure_auto_file }}"

if [ -z "${interface_file}" ] ; then
  echo "Error: no file with list of interfaces specified" ; exit 1
fi

# Make sure to remove the temporary directory when script is finished
trap "rm -rf $(dirname ${interface_file})" EXIT

containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

# Re-initialization of interfaces, stop all/unknown ones
stop_networking () {

  logger -t ${script} Stopping networking service

  if [ -d /run/systemd/system ] ; then
    systemctl stop networking.service
  else
    service networking stop
  fi

}

# Check what init we are using and bring interface down correctly
interface_down () {

  logger -t ${script} Shutting down ${1} interface

  if [ -d /run/systemd/system ] ; then

    systemctl stop ifup@${1}.service

  else
    ifdown ${1}
  fi

}

# Check what init we are using and bring interface up correctly
interface_up () {

  if [ -d /run/systemd/system ] ; then

    if $(containsElement "${1}" "${interface_start[@]}") ; then

      logger -t ${script} Starting up ${1} interface

      systemctl start ifup@${1}.service

    else

      logger -t ${script} Preparing script to activate ${1} later

      ( umask 077 ; touch ${ifup_delayed}-${1} )
      cat <<EOF >> ${ifup_delayed}-${1}
#!/bin/sh
if [ -z "\${1}" -o "\${1}" != "false" ] ; then
  systemctl start ifup@${1}.service
fi
rm -f ${ifup_delayed}-${1}
EOF
      chmod u+x ${ifup_delayed}-${1}
    fi

  else

    if $(containsElement "${1}" "${interface_start[@]}") ; then

      logger -t ${script} Starting up ${1} interface
      ifup ${1}

    else

      logger -t ${script} Preparing script to activate ${1} later

      ( umask 077 ; touch ${ifup_delayed}-${1} )
      cat <<EOF >> ${ifup_delayed}-${1}
#!/bin/sh
if [ -z "\${1}" -o "\${1}" != "false" ] ; then
  ifup ${1}
fi
rm -f ${ifup_delayed}-${1}
EOF
      chmod u+x ${ifup_delayed}-${1}
    fi
  fi

}

# Check if any interfaces have changed, if so, first stop all of them using
# current configuration, apply the new configuration and bring the modified
# interfaces back up
if [ -r ${interface_file} ] ; then
  source ${interface_file}

  logger -t ${script} "Interface state: removed=/${interface_removed[@]}/ generated=/${interface_generated[@]}/ auto=/${interface_auto[@]}/ hotplug=/${interface_hotplug[@]}/ start=/${interface_start[@]}/ list=/${interface_list[@]}/"

  if [ ${{ '{' }}#interface_list[@]} -ge 0 ]; then

    # Stop interfaces if automatic reconfiguration is allowed
    if [ ! -e ${ifupdown_manual} ] ; then

      # Stop all interfaces on the first run
      if [ -e ${interface_init_file} ] ; then

        stop_networking

      else

        for iface in ${interface_list[@]} ; do
          interface_down ${iface}
        done

      fi

    fi

    # Apply new interface configuration
    rsync -a --delete /etc/network/interfaces.config.d/ /etc/network/interfaces.d

    # Start interfaces if automatic reconfiguration is allowed
    if [ ! -e ${ifupdown_manual} ] ; then

      for iface in ${interface_list[@]} ; do
        interface_up ${iface}
      done

    fi

  fi

fi

